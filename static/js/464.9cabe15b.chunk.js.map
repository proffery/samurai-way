{"version":3,"file":"static/js/464.9cabe15b.chunk.js","mappings":"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","sources":["components/blocks/BlockHeader.styled.ts","components/blocks/BlockSection.styled.ts","components/common/checkbox/Checkbox_Styles.ts","components/common/checkbox/Checkbox.tsx","components/layout/login/loginForm/LoinForm_Styles.ts","components/layout/login/loginForm/LoinForm.tsx","components/layout/login/Login_Styles.ts","components/layout/login/Login.tsx"],"sourcesContent":["import { font } from 'styles/Font'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nexport const BlockHeader = styled.h2`\r\n    position: relative;\r\n    word-wrap: break-word;\r\n    padding-bottom: min(20px, 2vw);\r\n    width: 100%;\r\n    color: ${theme.color.text.primary};\r\n    ${font({ weight: 700, Fmin: 14, Fmax: 26 })}\r\n    &::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 1px;\r\n        width: 100%;\r\n        left: 0;\r\n        top: 100%;\r\n        background-color: ${theme.color.background.primary};\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        padding-bottom: 20px;\r\n    }\r\n`","import styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nexport const BlockSection = styled.section`\r\n    display: flex;\r\n    border-radius: 10px;\r\n    background-color: ${theme.color.background.block};\r\n    flex-direction: column;\r\n    color: ${theme.color.text.primary_dark};\r\n    padding: min(30px, 2vw);\r\n    height: fit-content;\r\n    gap: min(30px, 2vw);\r\n    box-shadow: ${theme.shadow.block};\r\n`","import { Input } from 'components/common/input/Input.styled'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst CheckboxInput = styled(Input)`\r\n  height: 0;\r\n  width: 0;\r\n  opacity: 0;\r\n  z-index: -1;\r\n`\r\nconst Label = styled.label`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 0px 0px 2em;\r\n`\r\nconst rotate = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\nconst Indicator = styled.div`\r\n  width: 1.2em;\r\n  height: 1.2em;\r\n  background: ${theme.color.background.primary};\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 5%;\r\n  transform: translateY(-50%);\r\n  border: 1px solid ${theme.color.text.primary};\r\n  border-radius: 0.2em;\r\n  ${CheckboxInput}:not(:disabled):checked & {\r\n    background: #d1d1d1;\r\n  }\r\n  ${Label}:hover & {\r\n    background: #ccc;\r\n  }\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    display: none;\r\n  }\r\n  ${CheckboxInput}:checked + &::after {\r\n    display: block;\r\n    top: -33%;\r\n    left: 20%;\r\n    width: 65%;\r\n    height: 120%;\r\n    border: solid ${theme.color.background.status_success};\r\n    border-width: 0 0.3em 0.3em 0;\r\n    animation-name: ${rotate};\r\n    animation-duration: 0.3s;\r\n    animation-fill-mode: forwards;\r\n  }\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n\r\nexport const S = {\r\n    CheckboxInput,\r\n    Indicator,\r\n    Label\r\n}","import React, { memo } from 'react'\r\nimport { S } from './Checkbox_Styles'\r\n\r\ntype Props = {\r\n  id: string\r\n  label: string\r\n  onSand?: (e?: React.FormEvent<HTMLFormElement> | undefined) => void\r\n  onChange?: (e?: React.ChangeEvent<any>) => void\r\n}\r\nexport const Checkbox: React.FC<Props &\r\n  React.HTMLProps<HTMLInputElement> & React.HTMLProps<HTMLLabelElement>> = memo((props) => {\r\n    const { id, label, name, disabled, checked, onChange, onSand } = props\r\n    const onClickHandler = (e: React.MouseEvent<any>) => {\r\n      onSand && onSand(e.currentTarget.value)\r\n    }\r\n\r\n    return <S.Label htmlFor={id} >{label}\r\n      <S.CheckboxInput\r\n        id={id}\r\n        type=\"checkbox\"\r\n        onChange={onChange}\r\n        onClick={onClickHandler}\r\n        name={name}\r\n        disabled={disabled}\r\n        checked={checked}\r\n      />\r\n      <S.Indicator />\r\n    </S.Label>\r\n  })\r\n\r\n\r\n\r\n\r\n","import styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: min(15px, 1vw);\r\n    padding: 0 min(30px, 2vw);\r\n    @media ${theme.media.mobile} {\r\n        background-color: ${theme.color.background.block};\r\n        align-self: center;\r\n        justify-self: center;\r\n        height: 80%;\r\n        width: 80%;\r\n        justify-content: center;\r\n    }\r\n`\r\nconst Notification = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nexport const S = {\r\n    Form,\r\n    Notification\r\n}","import { Button } from 'components/common/button/Button'\r\nimport { Checkbox } from 'components/common/checkbox/Checkbox'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Input } from 'components/common/input/Input.styled'\r\nimport { useFormik } from 'formik'\r\nimport { useActions } from 'utils/customHooks/useActions'\r\nimport { S } from './LoinForm_Styles'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectCaptchaUrl } from 'store/auth/authSelectors'\r\n\r\ntype FormikError = {\r\n    email?: string\r\n    password?: string\r\n    captcha?: string\r\n}\r\nexport const LoginForm: React.FC = () => {\r\n    const { login, addAppAlert } = useActions()\r\n    const captchaUrl = useSelector(selectCaptchaUrl)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            remember: false,\r\n            captcha: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            login(values)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email required'\r\n                addAppAlert('failed', errors.email)\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n                addAppAlert('failed', errors.email)\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password required'\r\n                addAppAlert('failed', errors.password)\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Password must be longer than 3'\r\n                addAppAlert('failed', errors.password)\r\n            }\r\n            if (captchaUrl && !values.captcha) {\r\n                errors.captcha = 'Captcha required'\r\n                addAppAlert('failed', errors.captcha)\r\n            }\r\n            return errors\r\n        },\r\n    })\r\n    return <S.Form onSubmit={formik.handleSubmit}>\r\n        <S.Notification>\r\n            <p>To log in get registered\r\n                <a href={'https://social-network.samuraijs.com/'}\r\n                    target={'_blank'} rel=\"noreferrer\"> here\r\n                </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n        </S.Notification>\r\n        <FlexWrapper direction={'column'} gap={'min(10px, 1vw)'}>\r\n            <label htmlFor={'email'}>Email</label>\r\n            <Input bordered={'true'}\r\n                type={'email'}\r\n                id={'email'}\r\n                error={!!formik.errors.email && !!formik.touched.email ? 'true' : 'false'}\r\n                {...formik.getFieldProps('email')}\r\n                placeholder={'free@samuraijs.com'}\r\n            />\r\n        </FlexWrapper>\r\n        <FlexWrapper direction={'column'} gap={'min(10px, 1vw)'}>\r\n            <label htmlFor={'password'}>Password</label>\r\n            <Input bordered={'true'}\r\n                type={'password'}\r\n                id={'password'}\r\n                error={!!formik.errors.password && !!formik.touched.password ? 'true' : 'false'}\r\n                {...formik.getFieldProps('password')}\r\n                placeholder={'free'}\r\n            />\r\n        </FlexWrapper>\r\n        <FlexWrapper gap={'min(10px, 1vw)'} align={'center'}>\r\n            <Checkbox\r\n                label='Remember me'\r\n                type={'checkbox'}\r\n                id={'remember'}\r\n                {...formik.getFieldProps('remember')}\r\n            />\r\n        </FlexWrapper>\r\n        {captchaUrl && <FlexWrapper direction={'column'} gap={'min(10px, 1vw)'}>\r\n            <label htmlFor={'captcha'}>captcha</label>\r\n            <Input bordered={'true'}\r\n                type={'captcha'}\r\n                id={'captcha'}\r\n                error={!!formik.errors.captcha && !!formik.touched.captcha ? 'true' : 'false'}\r\n                {...formik.getFieldProps('captcha')}\r\n                placeholder={'enter symbols from image'}\r\n                autoFocus\r\n            />\r\n            <FlexWrapper align='center' justify='center'>\r\n                <img src={captchaUrl} alt='captha' />\r\n            </FlexWrapper>\r\n        </FlexWrapper>}\r\n        <FlexWrapper justify={'center'}>\r\n            <Button\r\n                ariaLabel={'Submit button'}\r\n                variant={'primary'}\r\n                type={'submit'}\r\n                disabled={!!formik.errors.email ||\r\n                    !!formik.errors.password ||\r\n                    !!formik.errors.captcha}\r\n            >Sign in</Button>\r\n        </FlexWrapper>\r\n    </S.Form>\r\n}\r\n\r\n","import { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Login = styled.main`\r\n    display: flex;\r\n    background-color: ${theme.color.background.primary};\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: fit-content;\r\n`\r\nconst Section = styled(BlockSection)`\r\n    display: flex;\r\n    width: 35%;\r\n    height: fit-content;\r\n    min-width: 320px;\r\n    @media ${theme.media.mobile} {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nexport const S = {\r\n    Login,\r\n    Section,\r\n    Notification\r\n}","import { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { LoginForm } from 'components/layout/login/loginForm/LoinForm'\r\nimport React, { memo } from \"react\"\r\nimport { S } from './Login_Styles'\r\n\r\nconst Login: React.FC = memo(() => {\r\n\r\n    return <S.Login>\r\n        <S.Section id={'login'}>\r\n            <BlockHeader>Log In</BlockHeader>\r\n            <LoginForm />\r\n        </S.Section>\r\n    </S.Login>\r\n})\r\n\r\nexport default Login\r\n"],"names":["BlockHeader","styled","_templateObject","_taggedTemplateLiteral","theme","font","weight","Fmin","Fmax","BlockSection","CheckboxInput","Input","Label","_templateObject2","rotate","keyframes","_templateObject3","S","Indicator","_templateObject4","Checkbox","memo","props","id","label","name","disabled","checked","onChange","onSand","_jsxs","htmlFor","children","_jsx","type","onClick","e","currentTarget","value","Form","Notification","LoginForm","login","addAppAlert","useActions","captchaUrl","useSelector","selectCaptchaUrl","formik","useFormik","initialValues","email","password","remember","captcha","onSubmit","values","validate","errors","test","length","handleSubmit","href","target","rel","FlexWrapper","direction","gap","bordered","error","touched","getFieldProps","placeholder","align","autoFocus","justify","src","alt","Button","ariaLabel","variant","Login","Section"],"sourceRoot":""}