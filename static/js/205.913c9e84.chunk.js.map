{"version":3,"file":"static/js/205.913c9e84.chunk.js","mappings":"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","sources":["components/blocks/BlockHeader.styled.ts","components/blocks/BlockSection.styled.ts","components/blocks/friendsBlock/friend/Friend_Styles.ts","components/blocks/friendsBlock/friend/Friend.tsx","components/blocks/friendsBlock/FriendsBlock_Styles.ts","store/friends/friendsSelectors.ts","components/blocks/friendsBlock/FriendsBlock.tsx","components/common/checkbox/Checkbox_Styles.ts","components/common/checkbox/Checkbox.tsx","components/common/pagination/Pagination_Styles.ts","components/common/pagination/Pagination.tsx","components/common/toTop/ToTop_Styles.ts","components/common/toTop/ToTop.tsx","store/profile/profileSelectors.ts","components/common/editableSpan/EditableSpan_Styles.ts","components/common/editableSpan/EditableSpan.tsx","components/blocks/aboutBlock/about/About_Styles.ts","components/blocks/aboutBlock/about/About.tsx","components/blocks/aboutBlock/about/AboutForm.tsx","components/blocks/aboutBlock/AboutBlock_Styles.ts","components/blocks/aboutBlock/AboutBlock.tsx","components/blocks/contactsBlock/contacts/Contacts_Styles.ts","components/blocks/contactsBlock/contacts/Contacts.tsx","components/blocks/contactsBlock/contacts/ContactsForm.tsx","components/blocks/contactsBlock/Contacts_Styles.ts","components/blocks/contactsBlock/ContactsBlock.tsx","components/blocks/headerBlock/HeaderBlockForm.tsx","components/blocks/headerBlock/HeaderBlock_Styles.ts","components/blocks/headerBlock/HeaderBlock.tsx","components/blocks/postsBlock/post/Post.tsx","components/blocks/postsBlock/PostsBlock.tsx","components/layout/pages/profile/Profile_Styles.ts","components/layout/pages/profile/Profile.tsx"],"sourcesContent":["import { font } from 'styles/Font'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nexport const BlockHeader = styled.h2`\r\n    position: relative;\r\n    word-wrap: break-word;\r\n    padding-bottom: min(20px, 2vw);\r\n    width: 100%;\r\n    color: ${theme.color.text.primary};\r\n    ${font({ weight: 700, Fmin: 14, Fmax: 26 })}\r\n    &::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 1px;\r\n        width: 100%;\r\n        left: 0;\r\n        top: 100%;\r\n        background-color: ${theme.color.background.primary};\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        padding-bottom: 20px;\r\n    }\r\n`","import styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nexport const BlockSection = styled.section`\r\n    display: flex;\r\n    border-radius: 10px;\r\n    background-color: ${theme.color.background.block};\r\n    flex-direction: column;\r\n    color: ${theme.color.text.primary_dark};\r\n    padding: min(30px, 2vw);\r\n    height: fit-content;\r\n    gap: min(30px, 2vw);\r\n    box-shadow: ${theme.shadow.block};\r\n`","import { font } from './../../../../styles/Font';\r\nimport { Avatar } from 'components/common/avatar/Avatar';\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Friend = styled(NavLink)`\r\n    display: flex;\r\n    position: relative;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    height: 100%;\r\n    width: 100%;\r\n    gap: 6px;\r\n    padding: min(15px, 1vw);\r\n    &::after {\r\n        position: absolute;\r\n        content: '';\r\n        width: 100%;\r\n        height: 1px;\r\n        background-color: ${theme.color.background.primary};\r\n        bottom: 0%;\r\n    }\r\n    &:hover {\r\n        outline: 1px solid ${theme.color.background.primary};\r\n        background-color: ${theme.color.background.primary};\r\n        border-radius: 10px;\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        max-width: 20%;\r\n        min-width: 65px;\r\n    }\r\n`\r\nconst Photo = styled(Avatar)`\r\n    width: 45%;\r\n`\r\nconst Name = styled.span`\r\n    width: 53%;\r\n    text-align: center;\r\n    ${font({ weight: 400, Fmin: 10, Fmax: 14 })}\r\n    color: ${theme.color.text.primary_dark};\r\n    word-wrap: break-word;\r\n    overflow: hidden;\r\n`\r\nexport const S = {\r\n    Friend,\r\n    Photo,\r\n    Name\r\n}","import { UserResponse } from 'api/usersAPI'\r\nimport { Patch } from 'components/app/Router/routeNames'\r\nimport { memo } from 'react'\r\nimport { S } from './Friend_Styles'\r\n\r\ntype Props = {\r\n    friendData: UserResponse\r\n}\r\n\r\nexport const Friend: React.FC<Props> = memo((props) => {\r\n    return <S.Friend to={Patch.Profile + props.friendData.id} >\r\n        <S.Photo avatarURL={props.friendData.photos.small} />\r\n        <S.Name>{props.friendData.name}</S.Name>\r\n    </S.Friend>\r\n})\r\n\r\n","import { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport { Pagination } from 'components/common/pagination/Pagination'\r\nimport styled from 'styled-components'\r\nimport { font } from 'styles/Font'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst FriendsBlock = styled(BlockSection)`\r\n    display: flex;\r\n`\r\nconst FriendsList = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: row;\r\n    }\r\n`\r\nconst FriendsPagination = styled(Pagination)`\r\n    ${font({ weight: 700, Fmin: 10, Fmax: 13 })}\r\n    height: 1em;\r\n`\r\n\r\nexport const S = {\r\n    FriendsBlock,\r\n    FriendsList,\r\n    FriendsPagination\r\n}","import { UserResponse } from 'api/usersAPI'\r\nimport { AppRootState } from 'store/redux-store'\r\n\r\nexport const selectPossibleFriendsData = (state: AppRootState) => state.friends.possibleFriends\r\nexport const selectPossibleFriends = (state: AppRootState): UserResponse[] => state.friends.possibleFriends.users\r\nexport const selectTotalPossibleFriendsCount = (state: AppRootState): number => state.friends.possibleFriends.totalUsersCount\r\nexport const selectPossibleFriendsOnPage = (state: AppRootState): number => state.friends.possibleFriends.usersOnPage\r\nexport const selectPossibleFriendsCurrentPage = (state: AppRootState): number => state.friends.possibleFriends.currentPage\r\nexport const selectFriendsData = (state: AppRootState) => state.friends.friends\r\nexport const selectFriends = (state: AppRootState): UserResponse[] => state.friends.friends.users\r\nexport const selectFriendsOnPage = (state: AppRootState): number => state.friends.friends.usersOnPage\r\nexport const selectTotalFriendsCount = (state: AppRootState): number => state.friends.friends.totalUsersCount\r\nexport const selectFriendsCurrentPage = (state: AppRootState): number => state.friends.friends.currentPage","import { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { Friend } from 'components/blocks/friendsBlock/friend/Friend'\r\nimport { Button } from 'components/common/button/Button'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { memo, useEffect } from 'react'\r\nimport { S } from './FriendsBlock_Styles'\r\nimport { useActions } from 'utils/customHooks/useActions'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectFriendsData, selectPossibleFriendsData } from 'store/friends/friendsSelectors'\r\nimport { selectAppIsLoading } from 'store/app/appSelectors'\r\n\r\ntype Props = {\r\n    className?: string\r\n    isFriends?: boolean\r\n    headerName: string\r\n}\r\n\r\nexport const FriendsBlock: React.FC<Props> = memo(({ headerName: blockHeaderName, className, isFriends = true }) => {\r\n    const { getFriends } = useActions()\r\n    const { totalUsersCount, currentPage, usersOnPage, users } = useSelector(isFriends ? selectFriendsData : selectPossibleFriendsData)\r\n    const isLoading = useSelector(selectAppIsLoading)\r\n    const pagesCount = Math.ceil(totalUsersCount / usersOnPage)\r\n    const randomPage = getRandomPage(1, pagesCount)\r\n\r\n    useEffect(() => {\r\n        getFriends(randomPage, usersOnPage, isFriends)\r\n    }, [])\r\n\r\n    function getRandomPage(min: number, max: number) {\r\n        const minCeiled = Math.ceil(min)\r\n        const maxFloored = Math.floor(max)\r\n        return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled)\r\n    }\r\n    const randomizeFriends = () => {\r\n        getFriends(randomPage, usersOnPage, isFriends)\r\n    }\r\n    const pageChangeHandler = (pageNumber: number) => {\r\n        getFriends(pageNumber, usersOnPage, isFriends)\r\n    }\r\n\r\n    return <S.FriendsBlock\r\n        id={blockHeaderName.toLowerCase().replaceAll(' ', '-')}\r\n        className={className}\r\n    >\r\n        <FlexWrapper justify={'space-between'}>\r\n            <Button\r\n                onClick={randomizeFriends}\r\n                variant={'link'}\r\n                ariaLabel={'Randomize button'}\r\n            >\r\n                <BlockHeader>\r\n                    {blockHeaderName}\r\n                </BlockHeader>\r\n            </Button>\r\n        </FlexWrapper>\r\n        <S.FriendsList>\r\n            {users.map(friend => <Friend key={friend.id} friendData={friend} />)}\r\n        </S.FriendsList>\r\n        <FlexWrapper justify={'center'} direction={'row'}>\r\n            <S.FriendsPagination\r\n                appIsLoading={isLoading}\r\n                currentPage={currentPage}\r\n                totalUsersCount={totalUsersCount}\r\n                usersOnPage={usersOnPage}\r\n                pagesPortion={2}\r\n                pageChangeHandler={pageChangeHandler}\r\n            />\r\n        </FlexWrapper>\r\n    </S.FriendsBlock>\r\n})\r\n\r\n","import { Input } from 'components/common/input/Input.styled'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst CheckboxInput = styled(Input)`\r\n  height: 0;\r\n  width: 0;\r\n  opacity: 0;\r\n  z-index: -1;\r\n`\r\nconst Label = styled.label`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 0px 0px 2em;\r\n`\r\nconst rotate = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\nconst Indicator = styled.div`\r\n  width: 1.2em;\r\n  height: 1.2em;\r\n  background: ${theme.color.background.primary};\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 5%;\r\n  transform: translateY(-50%);\r\n  border: 1px solid ${theme.color.text.primary};\r\n  border-radius: 0.2em;\r\n  ${CheckboxInput}:not(:disabled):checked & {\r\n    background: #d1d1d1;\r\n  }\r\n  ${Label}:hover & {\r\n    background: #ccc;\r\n  }\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    display: none;\r\n  }\r\n  ${CheckboxInput}:checked + &::after {\r\n    display: block;\r\n    top: -33%;\r\n    left: 20%;\r\n    width: 65%;\r\n    height: 120%;\r\n    border: solid ${theme.color.background.status_success};\r\n    border-width: 0 0.3em 0.3em 0;\r\n    animation-name: ${rotate};\r\n    animation-duration: 0.3s;\r\n    animation-fill-mode: forwards;\r\n  }\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n\r\nexport const S = {\r\n    CheckboxInput,\r\n    Indicator,\r\n    Label\r\n}","import React, { memo } from 'react'\r\nimport { S } from './Checkbox_Styles'\r\n\r\ntype Props = {\r\n  id: string\r\n  label: string\r\n  onSand?: (e?: React.FormEvent<HTMLFormElement> | undefined) => void\r\n  onChange?: (e?: React.ChangeEvent<any>) => void\r\n}\r\nexport const Checkbox: React.FC<Props &\r\n  React.HTMLProps<HTMLInputElement> & React.HTMLProps<HTMLLabelElement>> = memo((props) => {\r\n    const { id, label, name, disabled, checked, onChange, onSand } = props\r\n    const onClickHandler = (e: React.MouseEvent<any>) => {\r\n      onSand && onSand(e.currentTarget.value)\r\n    }\r\n\r\n    return <S.Label htmlFor={id} >{label}\r\n      <S.CheckboxInput\r\n        id={id}\r\n        type=\"checkbox\"\r\n        onChange={onChange}\r\n        onClick={onClickHandler}\r\n        name={name}\r\n        disabled={disabled}\r\n        checked={checked}\r\n      />\r\n      <S.Indicator />\r\n    </S.Label>\r\n  })\r\n\r\n\r\n\r\n\r\n","import { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Input } from 'components/common/input/Input.styled'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst PaginationInput = styled(Input)`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    box-shadow: ${theme.shadow.text};\r\n    color: ${theme.color.text.primary};\r\n    z-index: 999;\r\n`\r\nconst Pagination = styled(FlexWrapper)`\r\n    position: relative;\r\n    button {\r\n        min-height: 15px;\r\n        min-width: 15px;\r\n    }\r\n`\r\n\r\nexport const S = {\r\n    Pagination,\r\n    PaginationInput\r\n}","import { Button } from 'components/common/button/Button'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport { useFormik } from 'formik'\r\nimport { memo, useEffect, useState } from 'react'\r\nimport { S } from './Pagination_Styles'\r\n\r\ntype Props = {\r\n    className?: string\r\n    currentPage: number\r\n    usersOnPage: number\r\n    totalUsersCount: number\r\n    appIsLoading: boolean\r\n    pagesPortion: number\r\n    pageChangeHandler: (pageNumber: number) => void\r\n}\r\n\r\nexport const Pagination: React.FC<Props> = memo((props) => {\r\n    const { currentPage, usersOnPage, totalUsersCount, pagesPortion,\r\n        className, appIsLoading, pageChangeHandler } = props\r\n    const rangesCount = Math.ceil(totalUsersCount / usersOnPage)\r\n    const rangesArray = Array.from({ length: rangesCount }, (_, i) => i + 1)\r\n    const pagesRange = Math.ceil(rangesArray.length / pagesPortion)\r\n    const [currentRange, setCurrentRange] = useState(Math.ceil(currentPage / pagesPortion))\r\n    const [showInput, setShowInput] = useState(false)\r\n    const minPageIndex = currentRange * pagesPortion - pagesPortion\r\n    const maxPageIndex = currentRange * pagesPortion\r\n\r\n    useEffect(() => {\r\n        setCurrentRange(Math.ceil(currentPage / pagesPortion))\r\n    }, [currentPage])\r\n\r\n    const pagesRangeInc = () => {\r\n        if (currentRange >= pagesRange) setCurrentRange(1)\r\n        else setCurrentRange(prev => prev + 1)\r\n    }\r\n    const pagesRangeDec = () => {\r\n        if (currentRange <= 1) setCurrentRange(pagesRange)\r\n        else setCurrentRange(prev => prev - 1)\r\n    }\r\n\r\n    type FormikError = {\r\n        page?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            page: currentPage,\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: (values) => {\r\n            pageChangeHandler(values.page)\r\n            setShowInput(false)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (!values.page) {\r\n                errors.page = 'Page required'\r\n            } else if (values.page < 1) {\r\n                errors.page = 'wrong range'\r\n            } else if (values.page > rangesCount) {\r\n                errors.page = 'wrong range'\r\n            }\r\n            return errors\r\n        },\r\n    })\r\n\r\n    const showInputHandler = () => {\r\n        setShowInput(prev => !prev)\r\n    }\r\n    const formBlurHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        formik.handleSubmit()\r\n        setShowInput(false)\r\n    }\r\n\r\n    return <S.Pagination direction={'column'} justify='center' align='center' className={className}>\r\n        <FlexWrapper justify='center'>\r\n            {rangesCount > pagesPortion &&\r\n                <Button\r\n                    className={props.className}\r\n                    ariaLabel={'Change pages range - button'}\r\n                    variant={'link'}\r\n                    disabled={props.appIsLoading}\r\n                    onClick={pagesRangeDec}\r\n                >\r\n                    <Icon\r\n                        iconId=\"leftArrow\"\r\n                        viewBox=\"-5 7 20 20\"\r\n                        height='100%'\r\n                        width='100%' />\r\n                </Button>\r\n            }\r\n            <FlexWrapper justify='center' align='center'>\r\n                {rangesArray\r\n                    .filter((el, index) => (index >= minPageIndex && index < maxPageIndex))\r\n                    .map((el, index, arr) =>\r\n                        <Button\r\n                            ariaLabel={'Go to page button'}\r\n                            key={el}\r\n                            className={props.className}\r\n                            variant={'link'}\r\n                            disabled={currentPage === el || props.appIsLoading}\r\n                            isActive={currentPage === el}\r\n                            onClick={() => { pageChangeHandler(el) }}\r\n                        >\r\n                            {index === arr.length - 1 ? el.toString() : el.toString() + ','}\r\n                        </Button>\r\n                    )\r\n                }\r\n            </FlexWrapper>\r\n            <FlexWrapper justify='center' align='center'>\r\n                {rangesCount > pagesPortion && showInput &&\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <S.PaginationInput\r\n                            type='number'\r\n                            placeholder={`1-${rangesCount}`}\r\n                            error={!!formik.errors.page && !!formik.touched.page ? 'true' : 'false'}\r\n                            name='page'\r\n                            min={'1'}\r\n                            max={rangesCount}\r\n                            value={formik.values.page}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                formik.handleChange(e)\r\n                            }}\r\n                            onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                formik.handleBlur(e)\r\n                                formBlurHandle(e)\r\n                            }}\r\n                            autoFocus\r\n                        />\r\n                    </form>\r\n                }\r\n                {maxPageIndex < rangesCount && <>\r\n                    <Button\r\n                        className={className}\r\n                        ariaLabel={'Show pages input button'}\r\n                        variant='link'\r\n                        onClick={showInputHandler}\r\n                    >&nbsp;...&nbsp;</Button>\r\n                    <Button\r\n                        ariaLabel={'Go to page button'}\r\n                        className={className}\r\n                        variant={'link'}\r\n                        disabled={currentPage === rangesCount || props.appIsLoading}\r\n                        isActive={currentPage === rangesCount}\r\n                        onClick={() => { pageChangeHandler(rangesCount) }}\r\n                    >{rangesCount.toString()}</Button>\r\n                </>\r\n                }\r\n            </FlexWrapper>\r\n            {rangesCount > pagesPortion &&\r\n                <Button\r\n                    className={className}\r\n                    variant={'link'}\r\n                    ariaLabel={'Change pages range + button'}\r\n                    disabled={appIsLoading}\r\n                    onClick={pagesRangeInc}\r\n                >\r\n                    <Icon\r\n                        iconId=\"rightArrow\"\r\n                        height='100%' width='100%'\r\n                        viewBox=\"15 7 20 20\"\r\n                    />\r\n                </Button>\r\n            }\r\n        </FlexWrapper>\r\n    </S.Pagination>\r\n})\r\n","import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst ToTop = styled(Link)`\r\n    position: fixed;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid;\r\n    background-color: ${theme.color.background.primary};\r\n    height: 30px;\r\n    width: 30px;\r\n    top: 95%;\r\n    left: 95%;\r\n    padding: 5px;\r\n    border-radius: 50%;\r\n    transform: translate(-95%, -95%) rotate(90deg);\r\n    z-index: 99999;\r\n    &:hover {\r\n        box-shadow: ${theme.shadow.block};\r\n    }\r\n`\r\n\r\nexport const S = { ToTop }","import { Icon } from 'components/common/icon/Icon'\r\nimport { memo, useEffect, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { S } from './ToTop_Styles'\r\n\r\ntype Props = {\r\n    anchor_id: string\r\n}\r\n\r\nexport const ToTop: React.FC<Props> = memo(({ anchor_id }) => {\r\n    const [scrolled, setScrolled] = useState(false)\r\n    const location = useLocation()\r\n    const lastHash = useRef('')\r\n\r\n    useEffect(() => {\r\n        const main = document.querySelector('main')\r\n        const onScroll = () => {\r\n            if (main && main.scrollTop > 300) {\r\n                setScrolled(true)\r\n            }\r\n            else {\r\n                setScrolled(false)\r\n            }\r\n        }\r\n        main && main.addEventListener('scroll', onScroll)\r\n        return () => { main && main.removeEventListener('scroll', onScroll) }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (location.hash) {\r\n            lastHash.current = location.hash.slice(1)\r\n        }\r\n\r\n        if (lastHash.current && document.getElementById(lastHash.current)) {\r\n            setTimeout(() => {\r\n                document\r\n                    .getElementById(lastHash.current)\r\n                    ?.scrollIntoView({ behavior: 'smooth', block: 'start' })\r\n                lastHash.current = ''\r\n            }, 100)\r\n        }\r\n    }, [location])\r\n\r\n    const onClickHandler = () => {\r\n        document.location = '#' + anchor_id\r\n    }\r\n\r\n    return scrolled ? <S.ToTop\r\n        to={'#' + anchor_id}\r\n        onClick={onClickHandler}\r\n    ><Icon iconId=\"leftArrow\" viewBox=\"-1 9 14 14\" />\r\n    </S.ToTop> : null\r\n})\r\n\r\n","import { AppRootState } from 'store/redux-store'\r\nimport { ProfileState } from './profileReducer'\r\n\r\nexport const selectProfileData = (state: AppRootState): ProfileState => state.profile","import { Input } from 'components/common/input/Input.styled'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst EditableInput = styled(Input)`\r\n    width: 100%;\r\n    color: ${theme.color.background.second};\r\n    font-size: inherit;\r\n    font-weight: inherit;\r\n    border-radius: 0;\r\n    padding: min(10px, 1vw) 0;\r\n`\r\nconst EditableSpan = styled.p`\r\n    display: flex;\r\n    width: 100%;\r\n    font-size: inherit;\r\n    font-weight: inherit;\r\n    padding: min(10px, 1vw) 0;\r\n`\r\n\r\nexport const S = {\r\n    EditableInput,\r\n    EditableSpan\r\n}","import React, { memo, useEffect, useState } from 'react'\r\nimport { S } from './EditableSpan_Styles'\r\n\r\ntype Props = {\r\n    name?: string\r\n    value: string\r\n    className?: string\r\n    actualValue: string\r\n    emptyText?: string\r\n    error?: 'true' | 'false'\r\n    onChange: (e: React.ChangeEvent<any>) => void\r\n    onSand: (e?: React.FormEvent<HTMLFormElement> | undefined) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<Props> = memo((props) => {\r\n    const { value, error, actualValue, emptyText, name, onChange, onSand } = props\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [localValue, setLocalValue] = useState(value)\r\n\r\n    useEffect(() => {\r\n        if (actualValue !== value) {\r\n            setLocalValue(actualValue)\r\n        } else setLocalValue(value)\r\n\r\n        if (error === 'true') {\r\n            setLocalValue(actualValue)\r\n        }\r\n    }, [value, error, actualValue])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewModeonBlur = (e: React.ChangeEvent<any>) => {\r\n        setEditMode(false)\r\n        error !== 'true' && actualValue !== value && onSand(e.currentTarget.value)\r\n    }\r\n    const activateViewModeonEnter = (e: React.KeyboardEvent<any>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            error !== 'true' && actualValue !== value && onSand(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    return editMode ? <S.EditableInput\r\n        value={value}\r\n        bordered={'false'}\r\n        onChange={onChange}\r\n        autoFocus\r\n        onBlur={activateViewModeonBlur}\r\n        onKeyPress={activateViewModeonEnter}\r\n        error={error}\r\n        name={name}\r\n        className={props.className}\r\n    /> : <S.EditableSpan\r\n        className={props.className}\r\n        onClick={activateEditMode}>{localValue || emptyText}\r\n    </S.EditableSpan>\r\n})\r\n","import { EditableSpan } from 'components/common/editableSpan/EditableSpan'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    gap: 5px;\r\n    form {\r\n        width: 100%;\r\n    }\r\n`\r\nconst Category = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    height: fit-content;\r\n    gap: 5px;\r\n    padding: 5px 0;\r\n    &::after {\r\n        position: absolute;\r\n        content: '';\r\n        width: 100%;\r\n        height: 1px;\r\n        background-color: ${theme.color.background.primary};\r\n        bottom: 0%;\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: row;\r\n        &::after {\r\n            position: absolute;\r\n            content: '';\r\n            width: 0;\r\n            height: 0;\r\n        }\r\n    }\r\n`\r\nconst ContactIcon = styled(Icon)`\r\n    width: 20%;\r\n    min-width: 24px;\r\n    @media ${theme.media.mobile} {\r\n        min-width: 18px;\r\n        width: 18px;\r\n    }\r\n `\r\nconst Description = styled.span`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 75%;\r\n    overflow-wrap: anywhere;\r\n `\r\nconst DescriptionEditable = styled(EditableSpan)`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 75%;\r\n    overflow-wrap: anywhere;\r\n `\r\n\r\nexport const S = {\r\n    Wrapper,\r\n    Category,\r\n    ContactIcon,\r\n    Description,\r\n    DescriptionEditable,\r\n}","import { memo } from 'react'\r\nimport { ProfileData } from 'store/profile/profileReducer'\r\nimport { S } from './About_Styles'\r\nimport { Checkbox } from 'components/common/checkbox/Checkbox'\r\n\r\ntype Props = {\r\n    profileData: ProfileData\r\n}\r\nexport const About: React.FC<Props> = memo(({ profileData }) => {\r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = profileData\r\n    return <S.Wrapper>\r\n        {fullName &&\r\n            <S.Category>\r\n                <S.ContactIcon\r\n                    iconId={'profile'}\r\n                    viewBox='-4 -4 22 22'\r\n                />\r\n                <S.Description>{fullName}</S.Description>\r\n            </S.Category>\r\n        }\r\n        {aboutMe &&\r\n            <S.Category>\r\n                <S.ContactIcon\r\n                    iconId={'info'}\r\n                />\r\n                <S.Description>{aboutMe}</S.Description>\r\n            </S.Category>\r\n        }\r\n        {lookingForAJob &&\r\n            <S.Category>\r\n                <Checkbox label='Looking job'\r\n                    id='lookingForAJob'\r\n                    checked={lookingForAJob}\r\n                    onChange={() => { }}\r\n                    readOnly\r\n                />\r\n            </S.Category>\r\n        }\r\n        {lookingForAJob &&\r\n            <S.Category>\r\n                <S.ContactIcon\r\n                    iconId={'info'}\r\n                />\r\n                <S.Description>{lookingForAJobDescription}</S.Description>\r\n            </S.Category>\r\n        }\r\n        {!fullName && !lookingForAJobDescription && !lookingForAJob && aboutMe &&\r\n            <S.Description>No info...</S.Description>\r\n        }\r\n    </S.Wrapper >\r\n})","import { useFormik } from 'formik'\r\nimport { memo } from 'react'\r\nimport { ChangeAbout, ProfileData } from 'store/profile/profileReducer'\r\nimport { S } from './About_Styles'\r\nimport { Checkbox } from 'components/common/checkbox/Checkbox'\r\nimport { AlertType } from 'store/app/appReducer'\r\n\r\ntype Props = {\r\n    profileData: ProfileData\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n    changeProfileAbout: (about: ChangeAbout) => void\r\n}\r\n\r\ntype FormikError = {\r\n    aboutMe?: string\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName?: string\r\n}\r\n\r\nexport const AboutForm: React.FC<Props> = memo((props) => {\r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = props.profileData\r\n    const CONTACTS_MAX_LENGTH = 40\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: fullName,\r\n            aboutMe: aboutMe,\r\n            lookingForAJob: lookingForAJob,\r\n            lookingForAJobDescription: lookingForAJobDescription\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: (values) => {\r\n            props.changeProfileAbout(values)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (values.fullName.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.fullName = `FullName must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.fullName)\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    return <S.Wrapper>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <S.Category>\r\n                <S.ContactIcon\r\n                    iconId={'profile'}\r\n                    viewBox='-4 -4 22 22'\r\n                />\r\n                <S.DescriptionEditable\r\n                    actualValue={fullName}\r\n                    onSand={formik.handleSubmit}\r\n                    {...formik.getFieldProps('fullName')}\r\n                />\r\n            </S.Category>\r\n            <S.Category>\r\n                <S.ContactIcon\r\n                    iconId={'info'}\r\n                />\r\n                <S.DescriptionEditable\r\n                    actualValue={aboutMe}\r\n                    onSand={formik.handleSubmit}\r\n                    {...formik.getFieldProps('aboutMe')}\r\n                />\r\n            </S.Category>\r\n            <S.Category>\r\n                <Checkbox label='Looking job'\r\n                    id='lookingForAJob'\r\n                    onSand={formik.handleSubmit}\r\n                    checked={lookingForAJob}\r\n                    {...formik.getFieldProps('lookingForAJob')}\r\n                />\r\n            </S.Category>\r\n            {lookingForAJob && <S.Category>\r\n                <S.ContactIcon\r\n                    iconId={'info'}\r\n                />\r\n                <S.DescriptionEditable\r\n                    actualValue={lookingForAJobDescription}\r\n                    onSand={formik.handleSubmit}\r\n                    {...formik.getFieldProps('lookingForAJobDescription')}\r\n                />\r\n            </S.Category>}\r\n        </form>\r\n    </S.Wrapper>\r\n})","import { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport styled from 'styled-components'\r\nimport { font } from 'styles/Font'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst AboutBlock = styled(BlockSection)`\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: ${theme.color.text.primary};\r\n    ${font({ weight: 300, Fmin: 10, Fmax: 16 })}\r\n`\r\nexport const S = {\r\n    AboutBlock\r\n}","import { About } from 'components/blocks/aboutBlock/about/About'\r\nimport { AboutForm } from 'components/blocks/aboutBlock/about/AboutForm'\r\nimport { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { memo } from 'react'\r\nimport { AuthState } from 'store/auth/authReducer'\r\nimport { ChangeAbout, ProfileData } from 'store/profile/profileReducer'\r\nimport { S } from './AboutBlock_Styles'\r\nimport { AlertType } from 'store/app/appReducer'\r\n\r\ntype Props = {\r\n    className?: string\r\n    profileData: ProfileData\r\n    authStateData: AuthState\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n    changeProfileAbout: (about: ChangeAbout) => void\r\n}\r\n\r\nexport const AboutBlock: React.FC<Props> = memo(({ className, profileData, authStateData, addAppAlert, changeProfileAbout }) => {\r\n    const { id: authId } = authStateData\r\n    const { userId } = profileData\r\n\r\n    return (\r\n        <S.AboutBlock id=\"contacts\" className={className}>\r\n            <BlockHeader>About</BlockHeader>\r\n            {userId === authId ?\r\n                <AboutForm\r\n                    profileData={profileData}\r\n                    addAppAlert={addAppAlert}\r\n                    changeProfileAbout={changeProfileAbout}\r\n                /> : <About profileData={profileData} />\r\n            }\r\n        </S.AboutBlock >\r\n    )\r\n})\r\n\r\n\r\n\r\n","import { EditableSpan } from 'components/common/editableSpan/EditableSpan'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    gap: 5px;\r\n    form {\r\n        width: 100%;\r\n    }\r\n`\r\nconst Category = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    height: fit-content;\r\n    gap: 5px;\r\n    padding: 5px 0;\r\n    &::after {\r\n        position: absolute;\r\n        content: '';\r\n        width: 100%;\r\n        height: 1px;\r\n        background-color: ${theme.color.background.primary};\r\n        bottom: 0%;\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: row;\r\n        &::after {\r\n            position: absolute;\r\n            content: '';\r\n            width: 0;\r\n            height: 0;\r\n        }\r\n    }\r\n`\r\nconst ContactIcon = styled(Icon)`\r\n    width: 20%;\r\n    min-width: 24px;\r\n    @media ${theme.media.mobile} {\r\n        min-width: 18px;\r\n        width: 18px;\r\n    }\r\n `\r\nconst Description = styled.span`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 75%;\r\n    overflow-wrap: anywhere;\r\n `\r\nconst DescriptionEditable = styled(EditableSpan)`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 75%;\r\n    overflow-wrap: anywhere;\r\n `\r\n\r\n export const S = {\r\n    Wrapper,\r\n    Category,\r\n    ContactIcon,\r\n    Description,\r\n    DescriptionEditable\r\n }","import { GetProfileContacts } from 'api/profileAPI'\r\nimport { memo } from 'react'\r\nimport { IconsType } from 'store/profile/profileReducer'\r\nimport { S } from './Contacts_Styles'\r\n\r\ntype Props = {\r\n    contactsData: GetProfileContacts\r\n    contactsIcons: IconsType\r\n}\r\nexport const Contacts: React.FC<Props> = memo(({ contactsIcons, ...props }) => {\r\n    const { facebook, twitter, instagram, youtube, github, vk, website, mainLink } = props.contactsData\r\n\r\n    return <S.Wrapper>\r\n        {contactsIcons.map(icon => props.contactsData[icon.name as keyof GetProfileContacts] &&\r\n            <S.Category key={icon.id}>\r\n                <S.ContactIcon\r\n                    iconId={icon.icon_id}\r\n                    viewBox={icon.viewBox}\r\n                />\r\n                <S.Description>{props.contactsData[icon.name as keyof GetProfileContacts]}</S.Description>\r\n            </S.Category>\r\n        )}\r\n        {!facebook && !twitter && !instagram && !youtube && !github && !vk && !website && !mainLink &&\r\n            <S.Description>No info...</S.Description>\r\n        }\r\n    </S.Wrapper>\r\n})\r\n","import { GetProfileContacts } from 'api/profileAPI'\r\nimport { useFormik } from 'formik'\r\nimport { memo } from 'react'\r\nimport { AlertType } from 'store/app/appReducer'\r\nimport { IconsType } from 'store/profile/profileReducer'\r\nimport { S } from './Contacts_Styles'\r\n\r\ntype Props = {\r\n    contactsData: GetProfileContacts\r\n    contactsIcons: IconsType\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n    changeProfileContacts: (contacts: GetProfileContacts) => void\r\n}\r\ntype FormikError = {\r\n    facebook?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    vk?: string\r\n    website?: string\r\n    mainLink?: string\r\n}\r\nexport const ContactsForm: React.FC<Props> = memo(({ contactsIcons, ...props }) => {\r\n    const { facebook, twitter, instagram, youtube, github, vk, website, mainLink } = props.contactsData\r\n    const CONTACTS_MAX_LENGTH = 40\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            facebook: facebook || '',\r\n            twitter: twitter || '',\r\n            instagram: instagram || '',\r\n            youtube: youtube || '',\r\n            github: github || '',\r\n            vk: vk || '',\r\n            website: website || '',\r\n            mainLink: mainLink || ''\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: (values) => {\r\n            props.changeProfileContacts(values)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (values.facebook.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.facebook = `facebook must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.facebook)\r\n            }\r\n            if (values.twitter.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.twitter = `twitter must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.twitter)\r\n            }\r\n            if (values.instagram.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.instagram = `instagram must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.instagram)\r\n            }\r\n            if (values.youtube.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.youtube = `youtube must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.youtube)\r\n            }\r\n            if (values.github.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.github = `github must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.github)\r\n            }\r\n            if (values.vk.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.vk = `vk must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.vk)\r\n            }\r\n            if (values.website.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.website = `website must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.website)\r\n            }\r\n            if (values.mainLink.length >= CONTACTS_MAX_LENGTH) {\r\n                errors.mainLink = `mainLink must be less than ${CONTACTS_MAX_LENGTH} symbols`\r\n                props.addAppAlert('failed', errors.mainLink)\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n    return <S.Wrapper>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            {contactsIcons.map(icon =>\r\n                <S.Category key={icon.id}>\r\n                    <S.ContactIcon\r\n                        iconId={icon.icon_id}\r\n                        viewBox={icon.viewBox}\r\n                    />\r\n                    <S.DescriptionEditable\r\n                        actualValue={props.contactsData[icon.name as keyof GetProfileContacts]}\r\n                        onSand={formik.handleSubmit}\r\n                        {...formik.getFieldProps(icon.name)}\r\n                    />\r\n                </S.Category>\r\n            )}\r\n        </form>\r\n    </S.Wrapper>\r\n})","import { font } from './../../../styles/Font';\r\nimport { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst ContactsBlock = styled(BlockSection)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: ${theme.color.text.primary};\r\n    ${font({ weight: 300, Fmin: 10, Fmax: 16 })}\r\n`\r\nexport const S = {\r\n    ContactsBlock\r\n}","import { GetProfileContacts } from 'api/profileAPI'\r\nimport { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { Contacts } from 'components/blocks/contactsBlock/contacts/Contacts'\r\nimport { ContactsForm } from 'components/blocks/contactsBlock/contacts/ContactsForm'\r\nimport { memo } from 'react'\r\nimport { AlertType } from 'store/app/appReducer'\r\nimport { AuthState } from 'store/auth/authReducer'\r\nimport { ProfileState } from 'store/profile/profileReducer'\r\nimport { S } from './Contacts_Styles'\r\n\r\ntype Props = {\r\n    className?: string\r\n    authStateData: AuthState\r\n    profileStateData: ProfileState\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n    changeProfileContacts: (contacts: GetProfileContacts) => void\r\n}\r\n\r\nexport const ContactsBlock: React.FC<Props> = memo((\r\n    { authStateData, profileStateData, className, addAppAlert, changeProfileContacts }) => {\r\n    const { id: authId } = authStateData\r\n    const { userId, contacts } = profileStateData.data\r\n    const { contactsIcons } = profileStateData\r\n\r\n    return <S.ContactsBlock id=\"contacts\" className={className}>\r\n        <BlockHeader>Contacts</BlockHeader>\r\n        {userId === authId\r\n            ? <ContactsForm\r\n                contactsData={contacts}\r\n                contactsIcons={contactsIcons}\r\n                addAppAlert={addAppAlert}\r\n                changeProfileContacts={changeProfileContacts}\r\n            />\r\n            : <Contacts\r\n                contactsData={contacts}\r\n                contactsIcons={contactsIcons}\r\n            />\r\n        }\r\n    </S.ContactsBlock >\r\n})\r\n\r\n","import { EditableSpan } from 'components/common/editableSpan/EditableSpan'\r\nimport { useFormik } from 'formik'\r\nimport { AlertType } from 'store/app/appReducer'\r\n\r\ntype Props = {\r\n    status: string\r\n    changeProfileStatus: (newStatus: string) => void\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n}\r\ntype FormikError = {\r\n    formStatus?: string\r\n}\r\nexport const HeaderBlockForm: React.FC<Props> = ({ changeProfileStatus, addAppAlert, status }) => {\r\n    const STATUS_MAX_LENGTH = 300\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            status: status\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: (values) => {\r\n            changeProfileStatus(values.status)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (values.status.length >= STATUS_MAX_LENGTH) {\r\n                errors.formStatus = `Status must be less than ${STATUS_MAX_LENGTH} symbols`\r\n                addAppAlert('failed', errors.formStatus)\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <EditableSpan\r\n            onSand={formik.handleSubmit}\r\n            name={'status'}\r\n            emptyText={'No status...'}\r\n            value={formik.values.status}\r\n            actualValue={status}\r\n            onChange={formik.handleChange}\r\n            error={!!formik.errors.status ? 'true' : 'false'}\r\n        />\r\n    </form>\r\n}","import { font } from './../../../styles/Font'\r\nimport { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport { Avatar } from 'components/common/avatar/Avatar'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst HeaderBlock = styled(BlockSection)`\r\n    aspect-ratio: 19 / 7;\r\n    flex-direction: column;\r\n    position: relative;\r\n    padding: 0;\r\n`\r\nconst BackgroundConainer = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: 70%;\r\n    color: ${theme.color.text.placeholder};\r\n`\r\nconst BackgroundImage = styled.img`\r\n    object-fit: cover;\r\n    object-position: center;\r\n    border-radius: 10px 10px 0 0;\r\n    width: 100%;\r\n    height: 100%;\r\n`\r\nconst Photo = styled(Avatar)`\r\n    position: absolute;\r\n    top: 35%;\r\n    left: 5%;\r\n    width: 17%;\r\n    border-radius: 50%;\r\n`\r\nconst InfoConainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    height: 30%;\r\n    padding: 0 5%;\r\n`\r\nconst TextContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    color: ${theme.color.text.primary};\r\n    height: 90%;\r\n    width: 60%;\r\n`\r\nconst Name = styled.span`\r\n    white-space: nowrap;\r\n    ${font({ weight: 700, Fmin: 16, Fmax: 30 })}\r\n    @media ${theme.media.mobile} {\r\n        ${font({ family: 'Orbitron', weight: 700, Fmin: 22, Fmax: 36 })}\r\n        position: absolute;\r\n        top: 12%;\r\n        right: 5%;\r\n        text-shadow: ${theme.shadow.header};\r\n  }\r\n`\r\nconst ButtonsContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    width: 35%;\r\n    gap: min(30px, 2vw);\r\n    justify-content: end;\r\n`\r\nconst MessagesButton = styled(NavLink)`\r\n    display: flex;\r\n    width: 50%;\r\n    align-items: center;\r\n    justify-content: end;\r\n    svg {\r\n        min-width: 24px;\r\n        min-height: 24px;\r\n    }\r\n    \r\n    &:active {\r\n        background-color: ${theme.color.background.primary};\r\n        color: ${theme.color.text.primary};\r\n        border-color: ${theme.color.background.second};\r\n    }\r\n`\r\nconst UploadForm = styled.form`\r\n    display: flex;\r\n    & input[type='file'] {\r\n        display: none;\r\n    }\r\n    justify-content: end;\r\n    align-items: center;\r\n`\r\nconst UploadButton = styled.label`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: end;\r\n    height: 100%;\r\n    color: ${theme.color.text.primary};\r\n    cursor: copy;\r\n`\r\n\r\nexport const S = {\r\n    HeaderBlock,\r\n    BackgroundConainer,\r\n    BackgroundImage,\r\n    Photo,\r\n    InfoConainer,\r\n    TextContainer,\r\n    Name,\r\n    ButtonsContainer,\r\n    MessagesButton,\r\n    UploadForm,\r\n    UploadButton,\r\n}","import { HeaderBlockForm } from 'components/blocks/headerBlock/HeaderBlockForm'\r\nimport { Button } from 'components/common/button/Button'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport { ChangeEvent, memo } from 'react'\r\nimport { AuthState } from 'store/auth/authReducer'\r\nimport { ProfileState } from 'store/profile/profileReducer'\r\nimport { S } from './HeaderBlock_Styles'\r\nimport { AlertType } from 'store/app/appReducer'\r\n\r\ntype Props = {\r\n    className?: string\r\n    authStateData: AuthState\r\n    profileStateData: ProfileState\r\n    appIsLoading: boolean\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    changeProfilePhotos: (image: File) => void\r\n    changeProfileStatus: (newStatus: string) => void\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n}\r\n\r\nexport const HeaderBlock: React.FC<Props> = memo((props) => {\r\n    const { follow, unfollow, addAppAlert,\r\n        changeProfilePhotos, changeProfileStatus, className,\r\n        appIsLoading } = props\r\n    const { isFollow, fullName, userId, status } = props.profileStateData.data\r\n    const { small, large } = props.profileStateData.data.photos\r\n    const { id: authId } = props.authStateData\r\n\r\n    const followHandler = () => {\r\n        isFollow ? unfollow(userId) : follow(userId)\r\n    }\r\n    const uploadPhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.files && changeProfilePhotos(e.currentTarget.files[0])\r\n    }\r\n\r\n    return <S.HeaderBlock id=\"profile-header\" className={className}>\r\n        <S.BackgroundConainer>\r\n            {large\r\n                ? <S.BackgroundImage src={large} alt='Background' />\r\n                : <Icon iconId={'avatarDefault'}\r\n                    viewBox=\"0 0 1024 1024\"\r\n                    height={'100%'}\r\n                    width={'100%'}\r\n                />\r\n            }\r\n            <S.Photo avatarURL={small} />\r\n        </S.BackgroundConainer>\r\n        <S.InfoConainer>\r\n            <S.TextContainer>\r\n                <S.Name>{fullName}</S.Name>\r\n                {authId === userId ? <HeaderBlockForm\r\n                    addAppAlert={addAppAlert}\r\n                    changeProfileStatus={changeProfileStatus}\r\n                    status={status}\r\n                /> : <span>{status}</span>}\r\n            </S.TextContainer>\r\n            {authId !== userId ?\r\n                <S.ButtonsContainer>\r\n                    <S.MessagesButton\r\n                        aria-label={`Go to chat with ${fullName}`}\r\n                        to={`/messages/${userId}`}\r\n                    ><Icon iconId={'messages'} viewBox=\"-2 -3 24 24\"\r\n                        height='40%'\r\n                        width='40%'\r\n                        />\r\n                    </S.MessagesButton>\r\n                    <Button\r\n                        ariaLabel={'Follow/Unfollow button'}\r\n                        variant={isFollow ? 'primary' : 'outlined'}\r\n                        onClick={followHandler}\r\n                        disabled={appIsLoading}\r\n                    >{isFollow ? 'Unfollow' : 'Follow'}</Button>\r\n                </S.ButtonsContainer> :\r\n                <S.ButtonsContainer>\r\n                    <S.UploadForm>\r\n                        <S.UploadButton htmlFor={'photo-upload'} title='Uplod photo'>\r\n                            <input\r\n                                id={'photo-upload'}\r\n                                type={'file'}\r\n                                accept={'image/*'}\r\n                                onChange={uploadPhotoHandler}\r\n                            /><Icon iconId={'addPhoto'}\r\n                                viewBox='-3 -2 30 30'\r\n                                height='40%'\r\n                                width='40%'\r\n                            />\r\n                        </S.UploadButton>\r\n                    </S.UploadForm>\r\n                </S.ButtonsContainer>\r\n            }\r\n        </S.InfoConainer>\r\n    </S.HeaderBlock>\r\n})\r\n\r\n","import { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport { memo } from 'react'\r\nimport { PostObject } from 'store/profile/profileReducer'\r\nimport styled from 'styled-components'\r\nimport { font } from 'styles/Font'\r\nimport { theme } from 'styles/Theme.styled'\r\nimport { Button } from 'components/common/button/Button'\r\nimport { Avatar } from 'components/common/avatar/Avatar'\r\n\r\ntype PostPropsType = {\r\n    postData: PostObject\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = memo((props) => {\r\n    const moreButtonOnClickHandler = () => {\r\n        alert('More Button')\r\n    }\r\n    const likesButtonOnClickHandler = () => {\r\n        alert('Likes Button')\r\n    }\r\n    const commentsButtonOnClickHandler = () => {\r\n        alert('Comments Button')\r\n    }\r\n    return (\r\n        <StyledPost>\r\n            <Author>\r\n                <AuthorInfo>\r\n                    <AuthorAvatar />\r\n                    <FlexWrapper direction=\"column\">\r\n                        <AuthorName>Dmitry Shamko</AuthorName>\r\n                        <PostDate>15mins ago</PostDate>\r\n                    </FlexWrapper>\r\n                </AuthorInfo>\r\n                <MoreButton\r\n                    variant={\"link\"}\r\n                    onClick={moreButtonOnClickHandler}\r\n                    ariaLabel={'Go to page open/close button'}\r\n                >...</MoreButton>\r\n            </Author>\r\n            <Picture>\r\n\r\n            </Picture>\r\n            <Message>\r\n                <MessageText>{props.postData.message}</MessageText>\r\n            </Message>\r\n            <PostActivites>\r\n                <FlexWrapper align=\"center\">\r\n                    <Button\r\n                        ariaLabel={'Like button'}\r\n                        onClick={likesButtonOnClickHandler}\r\n                        variant=\"link\"\r\n                    ><Icon iconId=\"likes\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" /></Button>\r\n                    <AuthorName>{props.postData.likeCount}</AuthorName>\r\n                </FlexWrapper>\r\n                <FlexWrapper align=\"center\">\r\n                    <Button\r\n                        onClick={commentsButtonOnClickHandler}\r\n                        variant=\"link\"\r\n                        ariaLabel={'Comments button'}\r\n                    ><Icon iconId=\"comments\" viewBox=\"0 0 28 28\" width=\"100%\" height=\"100%\" /></Button>\r\n                    <AuthorName>{props.postData.commentsCount}</AuthorName>\r\n                </FlexWrapper>\r\n            </PostActivites>\r\n        </StyledPost>\r\n    )\r\n})\r\n\r\nconst StyledPost = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${font({ weight: 300, Fmin: 10, Fmax: 16 })}\r\n    border-top: 1px solid;\r\n    border-color: ${theme.color.background.primary};\r\n    gap: 20px;\r\n    padding: 20px 0;\r\n`\r\n\r\nconst Author = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst AuthorInfo = styled.div`\r\n    width: 90%;\r\n    display: flex;\r\n    align-items: center;\r\n    color: ${theme.color.text.primary_dark};\r\n    gap: 5px;\r\n`\r\n\r\nconst AuthorAvatar = styled(Avatar)`\r\n   border-radius: 50% 50%;\r\n   width: 20%;\r\n   max-width: 60px;\r\n   aspect-ratio: 1/1;\r\n`\r\n\r\nconst AuthorName = styled.span`\r\n    white-space: nowrap;\r\n    ${font({ weight: 700, Fmin: 10, Fmax: 16 })}\r\n    color: ${theme.color.text.primary_dark};\r\n`\r\nconst MessageText = styled.span`\r\n    word-break: break-all;\r\n    ${font({ weight: 400, Fmin: 10, Fmax: 16 })}\r\n    color: ${theme.color.text.primary_dark};\r\n`\r\n\r\nconst PostDate = styled.span`\r\n    ${font({ weight: 300, Fmin: 8, Fmax: 10 })}\r\n`\r\n\r\nconst MoreButton = styled(Button)`\r\n    ${font({ weight: 800, Fmin: 10, Fmax: 16 })}\r\n    align-self: flex-start;\r\n`\r\n\r\nconst Picture = styled.div`\r\n    display: flex;\r\n    aspect-ratio: 15 / 8;\r\n    border-radius: 10px;\r\n    background-color: ${theme.color.background.primary};\r\n`\r\n\r\nconst Message = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`\r\n\r\nconst PostActivites = styled.div`\r\n    display: flex;\r\n    color: ${theme.color.text.primary};\r\n    gap: 20px;\r\n    button {\r\n        height: 24px;\r\n        @media ${theme.media.mobile} {\r\n            height: 18px;\r\n        }\r\n    }\r\n`\r\n\r\n\r\n","import styled from 'styled-components'\r\nimport { Button } from 'components/common/button/Button'\r\nimport { Input } from 'components/common/input/Input.styled'\r\nimport { Post } from 'components/blocks/postsBlock/post/Post'\r\nimport { ProfileState } from 'store/profile/profileReducer'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport React, { ChangeEvent, MouseEvent, KeyboardEvent, useState, memo } from \"react\"\r\n\r\ntype Props = {\r\n    className?: string\r\n    profileStateData: ProfileState\r\n    addNewPost: (text: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport const PostsBlock: React.FC<Props> = memo((props) => {\r\n    const [error, setError] = useState<string | null>('Enter your post')\r\n\r\n    const onChangeNewPostHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.addNewPost(e.currentTarget.value)\r\n    }\r\n    const addPostOnCtrlEnterHandler = (e: KeyboardEvent<HTMLFormElement>) => {\r\n        if (error) setError(null)\r\n        if (e.key === 'Enter' && e.ctrlKey) {\r\n            addPost()\r\n        }\r\n    }\r\n    const addPostOnClickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.preventDefault()\r\n        if (error) setError(null)\r\n        addPost()\r\n    }\r\n    const addPost = () => {\r\n        if (props.profileStateData.newPostForm.trim() !== \"\") {\r\n            props.addPost()\r\n        } else {\r\n            setError('Enter your post')\r\n        }\r\n    }\r\n    const postsList = () => {\r\n        return (\r\n            <>\r\n                {props.profileStateData.posts.map(post => <Post key={post.id} postData={post} />)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <StyledPosts id=\"posts\" className={props.className} >\r\n            <BlockHeader>Posts</BlockHeader>\r\n            <Form\r\n                onKeyDown={addPostOnCtrlEnterHandler}\r\n            >\r\n                <Input\r\n                    as={\"textarea\"}\r\n                    aria-label=\"enter your post\"\r\n                    placeholder=\"Enter your post\"\r\n                    bordered={'true'}\r\n                    value={props.profileStateData.newPostForm}\r\n                    onChange={onChangeNewPostHandler}\r\n                />\r\n                <FlexWrapper>\r\n                    <Button\r\n                        type={'submit'}\r\n                        variant={'primary'}\r\n                        disabled={!!error}\r\n                        onClick={addPostOnClickHandler}\r\n                        ariaLabel={'Submit button'}\r\n                    >{'Send'}</Button>\r\n                </FlexWrapper>\r\n            </Form>\r\n            {postsList()}\r\n        </StyledPosts>\r\n    )\r\n})\r\n\r\nconst StyledPosts = styled(BlockSection)`\r\n    display: flex;\r\n    width: 100%;\r\n    height: fit-content;\r\n`\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    textarea {\r\n        min-height: 70px;\r\n    }\r\n`","import { AboutBlock } from 'components/blocks/aboutBlock/AboutBlock'\r\nimport { ContactsBlock } from 'components/blocks/contactsBlock/ContactsBlock'\r\nimport { FriendsBlock } from 'components/blocks/friendsBlock/FriendsBlock'\r\nimport { HeaderBlock } from 'components/blocks/headerBlock/HeaderBlock'\r\nimport { PostsBlock } from 'components/blocks/postsBlock/PostsBlock'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Profile = styled.main`\r\n    display: grid;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    grid-template-rows: auto auto repeat(4, .5fr);\r\n    grid-template-columns: 21% 16% 15% 16% 21%;\r\n    @media ${theme.media.mobile} {\r\n        grid-template-rows: auto auto 1fr 1fr;\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n`\r\nconst Header = styled(HeaderBlock)`\r\n    grid-area: 1 / 1 / 2 / 6 ;\r\n    @media ${theme.media.mobile} {\r\n        grid-area: 1 / 1 / 2 / 3 ;\r\n    }\r\n`\r\nconst About = styled(AboutBlock)`\r\n    grid-area: 2 / 1 / 3 / 2 ;\r\n    @media ${theme.media.mobile} {\r\n        grid-area: 2 / 1 / 3 / 2 ;\r\n    }\r\n`\r\nconst Contacts = styled(ContactsBlock)`\r\n    grid-area: 3 / 1 / 4 / 2 ;\r\n    @media ${theme.media.mobile} {\r\n        grid-area: 2 / 2 / 3 / 3 ;\r\n    }\r\n`\r\nconst Posts = styled(PostsBlock)`\r\n    grid-area: 2 / 2 / 7 / 5 ;\r\n    @media ${theme.media.mobile} {\r\n        grid-area: 3 / 1 / 7 / 3 ;\r\n    }\r\n`\r\nconst Friends = styled(FriendsBlock)`\r\n    grid-area: 2 / 5 / 3 / 6 ;\r\n    @media ${theme.media.mobile} {\r\n        display: none;\r\n    }\r\n`\r\nconst PossibleFriends = styled(FriendsBlock)`\r\n    grid-area: 3 / 5 / 4 / 6 ;\r\n    @media ${theme.media.mobile} {\r\n        display: none;\r\n    }\r\n`\r\n\r\nexport const S = {\r\n    About,\r\n    Contacts,\r\n    Friends,\r\n    Header,\r\n    PossibleFriends,\r\n    Posts,\r\n    Profile\r\n}","import { ToTop } from 'components/common/toTop/ToTop'\r\nimport React, { memo, useEffect } from \"react\"\r\nimport { useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { selectAppIsLoading } from 'store/app/appSelectors'\r\nimport { selectAuthData } from 'store/auth/authSelectors'\r\nimport { selectProfileData } from 'store/profile/profileSelectors'\r\nimport { useActions } from 'utils/customHooks/useActions'\r\nimport { S } from './Profile_Styles'\r\n\r\nconst Profile: React.FC = memo(() => {\r\n    const appIsLoading = useSelector(selectAppIsLoading)\r\n    const authStateData = useSelector(selectAuthData)\r\n    const profileStateData = useSelector(selectProfileData)\r\n    const { followProfile, unfollowProfile, changeProfileStatus,\r\n        addAppAlert, changeProfilePhotos, addPost, getProfileData,\r\n        changeProfileAbout, changeProfileContacts, postOnChange\r\n    } = useActions()\r\n    const params = useParams<{ userId: string }>()\r\n    const { id: authId } = authStateData\r\n    const { userId } = params\r\n\r\n    useEffect(() => {\r\n        getProfileData(Number(userId ? userId : authId))\r\n    }, [userId])\r\n\r\n    return <S.Profile id='profile' >\r\n        <ToTop anchor_id='profile-header' />\r\n        <S.Header\r\n            authStateData={authStateData}\r\n            profileStateData={profileStateData}\r\n            appIsLoading={appIsLoading}\r\n            follow={followProfile}\r\n            unfollow={unfollowProfile}\r\n            changeProfileStatus={changeProfileStatus}\r\n            addAppAlert={addAppAlert}\r\n            changeProfilePhotos={changeProfilePhotos}\r\n        />\r\n        <S.About\r\n            profileData={profileStateData.data}\r\n            authStateData={authStateData}\r\n            addAppAlert={addAppAlert}\r\n            changeProfileAbout={changeProfileAbout}\r\n        />\r\n        <S.Contacts\r\n            profileStateData={profileStateData}\r\n            authStateData={authStateData}\r\n            addAppAlert={addAppAlert}\r\n            changeProfileContacts={changeProfileContacts}\r\n        />\r\n        <S.Posts\r\n            profileStateData={profileStateData}\r\n            addPost={addPost}\r\n            addNewPost={postOnChange}\r\n        />\r\n        <S.Friends headerName={'Friends'} />\r\n        <S.PossibleFriends headerName={'Might know'} isFriends={false} />\r\n    </S.Profile>\r\n})\r\n\r\nexport default Profile\r\n\r\n"],"names":["BlockHeader","styled","_templateObject","_taggedTemplateLiteral","theme","font","weight","Fmin","Fmax","BlockSection","S","Friend","NavLink","Photo","Avatar","_templateObject2","Name","_templateObject3","memo","props","_jsxs","to","Patch","friendData","id","children","_jsx","avatarURL","photos","small","name","FriendsBlock","FriendsList","FriendsPagination","Pagination","selectPossibleFriendsData","state","friends","possibleFriends","selectFriendsData","_ref","headerName","blockHeaderName","className","isFriends","getFriends","useActions","totalUsersCount","currentPage","usersOnPage","users","useSelector","isLoading","selectAppIsLoading","randomPage","min","max","minCeiled","Math","ceil","maxFloored","floor","random","getRandomPage","useEffect","toLowerCase","replaceAll","FlexWrapper","justify","Button","onClick","randomizeFriends","variant","ariaLabel","map","friend","direction","appIsLoading","pagesPortion","pageChangeHandler","pageNumber","CheckboxInput","Input","Label","rotate","keyframes","Indicator","_templateObject4","Checkbox","label","disabled","checked","onChange","onSand","htmlFor","type","e","currentTarget","value","PaginationInput","rangesCount","rangesArray","Array","from","length","_","i","pagesRange","currentRange","setCurrentRange","useState","showInput","setShowInput","minPageIndex","maxPageIndex","formik","useFormik","initialValues","page","enableReinitialize","onSubmit","values","validate","errors","align","pagesRangeDec","prev","Icon","iconId","viewBox","height","width","filter","el","index","arr","isActive","toString","handleSubmit","placeholder","concat","error","touched","handleChange","onBlur","handleBlur","autoFocus","_Fragment","showInputHandler","pagesRangeInc","ToTop","Link","anchor_id","scrolled","setScrolled","location","useLocation","lastHash","useRef","main","document","querySelector","onScroll","scrollTop","addEventListener","removeEventListener","hash","current","slice","getElementById","setTimeout","_document$getElementB","scrollIntoView","behavior","block","onClickHandler","selectProfileData","profile","EditableInput","EditableSpan","actualValue","emptyText","editMode","setEditMode","localValue","setLocalValue","bordered","onKeyPress","key","activateEditMode","Wrapper","Category","ContactIcon","Description","DescriptionEditable","_templateObject5","About","profileData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","readOnly","AboutForm","changeProfileAbout","addAppAlert","getFieldProps","AboutBlock","authStateData","authId","userId","Contacts","contactsIcons","facebook","twitter","instagram","youtube","github","vk","website","mainLink","contactsData","icon","icon_id","ContactsForm","CONTACTS_MAX_LENGTH","changeProfileContacts","ContactsBlock","profileStateData","contacts","data","HeaderBlockForm","changeProfileStatus","status","formStatus","HeaderBlock","BackgroundConainer","BackgroundImage","InfoConainer","TextContainer","_templateObject6","_templateObject7","family","ButtonsContainer","_templateObject8","MessagesButton","_templateObject9","UploadForm","_templateObject10","UploadButton","_templateObject11","follow","unfollow","changeProfilePhotos","isFollow","large","src","alt","followHandler","title","accept","files","Post","StyledPost","Author","AuthorInfo","AuthorAvatar","AuthorName","PostDate","MoreButton","moreButtonOnClickHandler","alert","Picture","Message","MessageText","postData","message","PostActivites","likesButtonOnClickHandler","likeCount","commentsButtonOnClickHandler","commentsCount","PostsBlock","setError","addPost","newPostForm","trim","StyledPosts","Form","onKeyDown","ctrlKey","as","addNewPost","preventDefault","posts","post","Profile","Header","Posts","Friends","PossibleFriends","selectAuthData","followProfile","unfollowProfile","getProfileData","postOnChange","params","useParams","Number"],"sourceRoot":""}