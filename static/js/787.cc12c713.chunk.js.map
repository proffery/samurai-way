{"version":3,"file":"static/js/787.cc12c713.chunk.js","mappings":"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","sources":["components/blocks/BlockHeader.styled.ts","components/blocks/BlockSection.styled.ts","components/blocks/friendsBlock/friend/Friend_Styles.ts","components/blocks/friendsBlock/friend/Friend.tsx","components/blocks/friendsBlock/FriendsBlock_Styles.ts","store/friends/friendsSelectors.ts","components/blocks/friendsBlock/FriendsBlock.tsx","components/common/pagination/Pagination_Styles.ts","components/common/pagination/Pagination.tsx","components/common/toTop/ToTop_Styles.ts","components/common/toTop/ToTop.tsx","../node_modules/react-use-draggable-scroll/src/useIsomorphicLayoutEffect.ts","../node_modules/react-use-draggable-scroll/src/index.tsx","components/blocks/dialogsBlock/DialogsBlock_Styles.ts","components/blocks/dialogsBlock/DialogsBlock.tsx","components/blocks/messagesBlock/messagesForm/MessagesForm_Styles.ts","components/blocks/messagesBlock/messagesForm/MessagesForm.tsx","components/blocks/messagesBlock/message/Message_Styles.ts","components/blocks/messagesBlock/message/Message.tsx","components/blocks/messagesBlock/messagesList/MessagesList_Styles.ts","components/blocks/messagesBlock/messagesList/MessagesList.tsx","components/blocks/messagesBlock/MessagesBlock_Styles.ts","components/blocks/messagesBlock/MessagesBlock.tsx","store/messages/messagesSelectors.ts","components/layout/pages/messages/Messages_Styles.ts","components/layout/pages/messages/Messages.tsx"],"sourcesContent":["import { font } from 'styles/Font'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nexport const BlockHeader = styled.h2`\r\n    position: relative;\r\n    word-wrap: break-word;\r\n    padding-bottom: min(20px, 2vw);\r\n    width: 100%;\r\n    color: ${theme.color.text.primary};\r\n    ${font({ weight: 700, Fmin: 14, Fmax: 26 })}\r\n    &::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 1px;\r\n        width: 100%;\r\n        left: 0;\r\n        top: 100%;\r\n        background-color: ${theme.color.background.primary};\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        padding-bottom: 20px;\r\n    }\r\n`","import styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nexport const BlockSection = styled.section`\r\n    display: flex;\r\n    border-radius: 10px;\r\n    background-color: ${theme.color.background.block};\r\n    flex-direction: column;\r\n    color: ${theme.color.text.primary_dark};\r\n    padding: min(30px, 2vw);\r\n    height: fit-content;\r\n    gap: min(30px, 2vw);\r\n    box-shadow: ${theme.shadow.block};\r\n`","import { font } from './../../../../styles/Font';\r\nimport { Avatar } from 'components/common/avatar/Avatar';\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Friend = styled(NavLink)`\r\n    display: flex;\r\n    position: relative;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    height: 100%;\r\n    width: 100%;\r\n    gap: 6px;\r\n    padding: min(15px, 2vw);\r\n    &::after {\r\n        position: absolute;\r\n        content: '';\r\n        width: 100%;\r\n        height: 1px;\r\n        background-color: ${theme.color.background.primary};\r\n        bottom: 0%;\r\n    }\r\n    &:hover {\r\n        outline: 1px solid ${theme.color.background.primary};\r\n        background-color: ${theme.color.background.primary};\r\n        border-radius: 10px;\r\n    }\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        max-width: 20%;\r\n        min-width: 65px;\r\n    }\r\n`\r\nconst Photo = styled(Avatar)`\r\n    width: 45%;\r\n`\r\nconst Name = styled.span`\r\n    width: 53%;\r\n    text-align: center;\r\n    ${font({ weight: 400, Fmin: 10, Fmax: 14 })}\r\n    color: ${theme.color.text.primary_dark};\r\n    word-wrap: break-word;\r\n    overflow: hidden;\r\n`\r\nexport const S = {\r\n    Friend,\r\n    Photo,\r\n    Name\r\n}","import { UserResponse } from 'api/usersAPI'\r\nimport { Patch } from 'components/app/Router/routeNames'\r\nimport { memo } from 'react'\r\nimport { S } from './Friend_Styles'\r\n\r\ntype Props = {\r\n    friendData: UserResponse\r\n}\r\n\r\nexport const Friend: React.FC<Props> = memo((props) => {\r\n    return <S.Friend to={Patch.Profile + props.friendData.id} >\r\n        <S.Photo avatarURL={props.friendData.photos.small} />\r\n        <S.Name>{props.friendData.name}</S.Name>\r\n    </S.Friend>\r\n})\r\n\r\n","import { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport { Pagination } from 'components/common/pagination/Pagination'\r\nimport styled from 'styled-components'\r\nimport { font } from 'styles/Font'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst FriendsBlock = styled(BlockSection)`\r\n    display: flex;\r\n`\r\nconst FriendsList = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: row;\r\n    }\r\n`\r\nconst FriendsPagination = styled(Pagination)`\r\n    ${font({ weight: 700, Fmin: 10, Fmax: 13 })}\r\n    height: 1em;\r\n`\r\n\r\nexport const S = {\r\n    FriendsBlock,\r\n    FriendsList,\r\n    FriendsPagination\r\n}","import { UserResponse } from 'api/usersAPI'\r\nimport { AppRootState } from 'store/redux-store'\r\n\r\nexport const selectPossibleFriendsData = (state: AppRootState) => state.friends.possibleFriends\r\nexport const selectPossibleFriends = (state: AppRootState): UserResponse[] => state.friends.possibleFriends.users\r\nexport const selectTotalPossibleFriendsCount = (state: AppRootState): number => state.friends.possibleFriends.totalUsersCount\r\nexport const selectPossibleFriendsOnPage = (state: AppRootState): number => state.friends.possibleFriends.usersOnPage\r\nexport const selectPossibleFriendsCurrentPage = (state: AppRootState): number => state.friends.possibleFriends.currentPage\r\nexport const selectFriendsData = (state: AppRootState) => state.friends.friends\r\nexport const selectFriends = (state: AppRootState): UserResponse[] => state.friends.friends.users\r\nexport const selectFriendsOnPage = (state: AppRootState): number => state.friends.friends.usersOnPage\r\nexport const selectTotalFriendsCount = (state: AppRootState): number => state.friends.friends.totalUsersCount\r\nexport const selectFriendsCurrentPage = (state: AppRootState): number => state.friends.friends.currentPage","import { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { Friend } from 'components/blocks/friendsBlock/friend/Friend'\r\nimport { Button } from 'components/common/button/Button'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { memo, useEffect } from 'react'\r\nimport { S } from './FriendsBlock_Styles'\r\nimport { useActions } from 'utils/customHooks/useActions'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectFriendsData, selectPossibleFriendsData } from 'store/friends/friendsSelectors'\r\nimport { selectAppIsLoading } from 'store/app/appSelectors'\r\n\r\ntype Props = {\r\n    className?: string\r\n    isFriends?: boolean\r\n    headerName: string\r\n}\r\n\r\nexport const FriendsBlock: React.FC<Props> = memo(({ headerName: blockHeaderName, className, isFriends = true }) => {\r\n    const { getFriends } = useActions()\r\n    const { totalUsersCount, currentPage, usersOnPage, users } = useSelector(isFriends ? selectFriendsData : selectPossibleFriendsData)\r\n    const isLoading = useSelector(selectAppIsLoading)\r\n    const pagesCount = Math.ceil(totalUsersCount / usersOnPage)\r\n    const randomPage = getRandomPage(1, pagesCount)\r\n\r\n    useEffect(() => {\r\n        getFriends(randomPage, usersOnPage, isFriends)\r\n    }, [])\r\n\r\n    function getRandomPage(min: number, max: number) {\r\n        const minCeiled = Math.ceil(min)\r\n        const maxFloored = Math.floor(max)\r\n        return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled)\r\n    }\r\n    const randomizeFriends = () => {\r\n        getFriends(randomPage, usersOnPage, isFriends)\r\n    }\r\n    const pageChangeHandler = (pageNumber: number) => {\r\n        getFriends(pageNumber, usersOnPage, isFriends)\r\n    }\r\n\r\n    return <S.FriendsBlock\r\n        id={blockHeaderName.toLowerCase().replaceAll(' ', '-')}\r\n        className={className}\r\n    >\r\n        <FlexWrapper justify={'space-between'}>\r\n            <Button\r\n                onClick={randomizeFriends}\r\n                variant={'link'}\r\n                ariaLabel={'Randomize button'}\r\n            >\r\n                <BlockHeader>\r\n                    {blockHeaderName}\r\n                </BlockHeader>\r\n            </Button>\r\n        </FlexWrapper>\r\n        <S.FriendsList>\r\n            {users.map(friend => <Friend key={friend.id} friendData={friend} />)}\r\n        </S.FriendsList>\r\n        <FlexWrapper justify={'center'} direction={'row'}>\r\n            <S.FriendsPagination\r\n                appIsLoading={isLoading}\r\n                currentPage={currentPage}\r\n                totalUsersCount={totalUsersCount}\r\n                usersOnPage={usersOnPage}\r\n                pagesPortion={2}\r\n                pageChangeHandler={pageChangeHandler}\r\n            />\r\n        </FlexWrapper>\r\n    </S.FriendsBlock>\r\n})\r\n\r\n","import { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Input } from 'components/common/input/Input.styled'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst PaginationInput = styled(Input)`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    box-shadow: ${theme.shadow.text};\r\n    color: ${theme.color.text.primary};\r\n    z-index: 999;\r\n`\r\nconst Pagination = styled(FlexWrapper)`\r\n    position: relative;\r\n    button {\r\n        min-height: 15px;\r\n        min-width: 15px;\r\n    }\r\n`\r\n\r\nexport const S = {\r\n    Pagination,\r\n    PaginationInput\r\n}","import { Button } from 'components/common/button/Button'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport { useFormik } from 'formik'\r\nimport { memo, useEffect, useState } from 'react'\r\nimport { S } from './Pagination_Styles'\r\n\r\ntype Props = {\r\n    className?: string\r\n    currentPage: number\r\n    usersOnPage: number\r\n    totalUsersCount: number\r\n    appIsLoading: boolean\r\n    pagesPortion: number\r\n    pageChangeHandler: (pageNumber: number) => void\r\n}\r\n\r\nexport const Pagination: React.FC<Props> = memo((props) => {\r\n    const { currentPage, usersOnPage, totalUsersCount, pagesPortion,\r\n        className, appIsLoading, pageChangeHandler } = props\r\n    const rangesCount = Math.ceil(totalUsersCount / usersOnPage)\r\n    const rangesArray = Array.from({ length: rangesCount }, (_, i) => i + 1)\r\n    const pagesRange = Math.ceil(rangesArray.length / pagesPortion)\r\n    const [currentRange, setCurrentRange] = useState(Math.ceil(currentPage / pagesPortion))\r\n    const [showInput, setShowInput] = useState(false)\r\n    const minPageIndex = currentRange * pagesPortion - pagesPortion\r\n    const maxPageIndex = currentRange * pagesPortion\r\n\r\n    useEffect(() => {\r\n        setCurrentRange(Math.ceil(currentPage / pagesPortion))\r\n    }, [currentPage])\r\n\r\n    const pagesRangeInc = () => {\r\n        if (currentRange >= pagesRange) setCurrentRange(1)\r\n        else setCurrentRange(prev => prev + 1)\r\n    }\r\n    const pagesRangeDec = () => {\r\n        if (currentRange <= 1) setCurrentRange(pagesRange)\r\n        else setCurrentRange(prev => prev - 1)\r\n    }\r\n\r\n    type FormikError = {\r\n        page?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            page: currentPage,\r\n        },\r\n        enableReinitialize: true,\r\n        onSubmit: (values) => {\r\n            pageChangeHandler(values.page)\r\n            setShowInput(false)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (!values.page) {\r\n                errors.page = 'Page required'\r\n            } else if (values.page < 1) {\r\n                errors.page = 'wrong range'\r\n            } else if (values.page > rangesCount) {\r\n                errors.page = 'wrong range'\r\n            }\r\n            return errors\r\n        },\r\n    })\r\n\r\n    const showInputHandler = () => {\r\n        setShowInput(prev => !prev)\r\n    }\r\n    const formBlurHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        formik.handleSubmit()\r\n        setShowInput(false)\r\n    }\r\n\r\n    return <S.Pagination direction={'column'} justify='center' align='center' className={className}>\r\n        <FlexWrapper justify='center'>\r\n            {rangesCount > pagesPortion &&\r\n                <Button\r\n                    className={props.className}\r\n                    ariaLabel={'Change pages range - button'}\r\n                    variant={'link'}\r\n                    disabled={props.appIsLoading}\r\n                    onClick={pagesRangeDec}\r\n                >\r\n                    <Icon\r\n                        iconId=\"leftArrow\"\r\n                        viewBox=\"-5 7 20 20\"\r\n                        height='100%'\r\n                        width='100%' />\r\n                </Button>\r\n            }\r\n            <FlexWrapper justify='center' align='center'>\r\n                {rangesArray\r\n                    .filter((el, index) => (index >= minPageIndex && index < maxPageIndex))\r\n                    .map((el, index, arr) =>\r\n                        <Button\r\n                            ariaLabel={'Go to page button'}\r\n                            key={el}\r\n                            className={props.className}\r\n                            variant={'link'}\r\n                            disabled={currentPage === el || props.appIsLoading}\r\n                            isActive={currentPage === el}\r\n                            onClick={() => { pageChangeHandler(el) }}\r\n                        >\r\n                            {index === arr.length - 1 ? el.toString() : el.toString() + ','}\r\n                        </Button>\r\n                    )\r\n                }\r\n            </FlexWrapper>\r\n            <FlexWrapper justify='center' align='center'>\r\n                {rangesCount > pagesPortion && showInput &&\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <S.PaginationInput\r\n                            type='number'\r\n                            placeholder={`1-${rangesCount}`}\r\n                            error={!!formik.errors.page && !!formik.touched.page ? 'true' : 'false'}\r\n                            name='page'\r\n                            min={'1'}\r\n                            max={rangesCount}\r\n                            value={formik.values.page}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                formik.handleChange(e)\r\n                            }}\r\n                            onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                formik.handleBlur(e)\r\n                                formBlurHandle(e)\r\n                            }}\r\n                            autoFocus\r\n                        />\r\n                    </form>\r\n                }\r\n                {maxPageIndex < rangesCount && <>\r\n                    <Button\r\n                        className={className}\r\n                        ariaLabel={'Show pages input button'}\r\n                        variant='link'\r\n                        onClick={showInputHandler}\r\n                    >&nbsp;...&nbsp;</Button>\r\n                    <Button\r\n                        ariaLabel={'Go to page button'}\r\n                        className={className}\r\n                        variant={'link'}\r\n                        disabled={currentPage === rangesCount || props.appIsLoading}\r\n                        isActive={currentPage === rangesCount}\r\n                        onClick={() => { pageChangeHandler(rangesCount) }}\r\n                    >{rangesCount.toString()}</Button>\r\n                </>\r\n                }\r\n            </FlexWrapper>\r\n            {rangesCount > pagesPortion &&\r\n                <Button\r\n                    className={className}\r\n                    variant={'link'}\r\n                    ariaLabel={'Change pages range + button'}\r\n                    disabled={appIsLoading}\r\n                    onClick={pagesRangeInc}\r\n                >\r\n                    <Icon\r\n                        iconId=\"rightArrow\"\r\n                        height='100%' width='100%'\r\n                        viewBox=\"15 7 20 20\"\r\n                    />\r\n                </Button>\r\n            }\r\n        </FlexWrapper>\r\n    </S.Pagination>\r\n})\r\n","import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst ToTop = styled(Link)`\r\n    position: fixed;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid;\r\n    background-color: ${theme.color.background.primary};\r\n    height: 30px;\r\n    width: 30px;\r\n    top: 95%;\r\n    left: 95%;\r\n    padding: 5px;\r\n    border-radius: 50%;\r\n    transform: translate(-95%, -95%) rotate(90deg);\r\n    z-index: 99999;\r\n    &:hover {\r\n        box-shadow: ${theme.shadow.block};\r\n    }\r\n`\r\n\r\nexport const S = { ToTop }","import { Icon } from 'components/common/icon/Icon'\r\nimport { memo, useEffect, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { S } from './ToTop_Styles'\r\n\r\ntype Props = {\r\n    anchor_id: string\r\n}\r\n\r\nexport const ToTop: React.FC<Props> = memo(({ anchor_id }) => {\r\n    const [scrolled, setScrolled] = useState(false)\r\n    const location = useLocation()\r\n    const lastHash = useRef('')\r\n\r\n    useEffect(() => {\r\n        const main = document.querySelector('main')\r\n        const onScroll = () => {\r\n            if (main && main.scrollTop > 300) {\r\n                setScrolled(true)\r\n            }\r\n            else {\r\n                setScrolled(false)\r\n            }\r\n        }\r\n        main && main.addEventListener('scroll', onScroll)\r\n        return () => { main && main.removeEventListener('scroll', onScroll) }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (location.hash) {\r\n            lastHash.current = location.hash.slice(1)\r\n        }\r\n\r\n        if (lastHash.current && document.getElementById(lastHash.current)) {\r\n            setTimeout(() => {\r\n                document\r\n                    .getElementById(lastHash.current)\r\n                    ?.scrollIntoView({ behavior: 'smooth', block: 'start' })\r\n                lastHash.current = ''\r\n            }, 100)\r\n        }\r\n    }, [location])\r\n\r\n    const onClickHandler = () => {\r\n        document.location = '#' + anchor_id\r\n    }\r\n\r\n    return scrolled ? <S.ToTop\r\n        to={'#' + anchor_id}\r\n        onClick={onClickHandler}\r\n    ><Icon iconId=\"leftArrow\" viewBox=\"-1 9 14 14\" />\r\n    </S.ToTop> : null\r\n})\r\n\r\n","import { useLayoutEffect, useEffect } from 'react';\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default useIsomorphicLayoutEffect;\n","import { MutableRefObject, useEffect, useRef } from \"react\";\n\nimport useLayoutEffect from \"./useIsomorphicLayoutEffect\";\n\ntype OptionsType = {\n  decayRate?: number;\n  safeDisplacement?: number;\n  applyRubberBandEffect?: boolean;\n  activeMouseButton?: \"Left\" | \"Middle\" | \"Right\";\n  isMounted?: boolean;\n};\n\ntype ReturnType = {\n  events: {\n    onMouseDown: (e: React.MouseEvent<HTMLElement>) => void;\n  };\n};\n\nexport function useDraggable(\n  ref: MutableRefObject<HTMLElement>,\n  {\n    decayRate = 0.95,\n    safeDisplacement = 10,\n    applyRubberBandEffect = false,\n    activeMouseButton = \"Left\",\n    isMounted = true,\n  }: OptionsType = {}\n): ReturnType {\n  const internalState = useRef({\n    isMouseDown: false,\n    isDraggingX: false,\n    isDraggingY: false,\n    initialMouseX: 0,\n    initialMouseY: 0,\n    lastMouseX: 0,\n    lastMouseY: 0,\n    scrollSpeedX: 0,\n    scrollSpeedY: 0,\n    lastScrollX: 0,\n    lastScrollY: 0,\n  });\n\n  let isScrollableAlongX = false;\n  let isScrollableAlongY = false;\n  let maxHorizontalScroll = 0;\n  let maxVerticalScroll = 0;\n  let cursorStyleOfWrapperElement: string;\n  let cursorStyleOfChildElements: string[];\n  let transformStyleOfChildElements: string[];\n  let transitionStyleOfChildElements: string[];\n\n  const timing = (1 / 60) * 1000; // period of most monitors (60fps)\n\n  useLayoutEffect(() => {\n    if (isMounted) {\n      isScrollableAlongX =\n        window.getComputedStyle(ref.current).overflowX === \"scroll\";\n      isScrollableAlongY =\n        window.getComputedStyle(ref.current).overflowY === \"scroll\";\n\n      maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth;\n      maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight;\n\n      cursorStyleOfWrapperElement = window.getComputedStyle(ref.current).cursor;\n\n      cursorStyleOfChildElements = [];\n      transformStyleOfChildElements = [];\n      transitionStyleOfChildElements = [];\n\n      (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n        (child: HTMLElement) => {\n          cursorStyleOfChildElements.push(\n            window.getComputedStyle(child).cursor\n          );\n\n          transformStyleOfChildElements.push(\n            window.getComputedStyle(child).transform === \"none\"\n              ? \"\"\n              : window.getComputedStyle(child).transform\n          );\n\n          transitionStyleOfChildElements.push(\n            window.getComputedStyle(child).transition === \"none\"\n              ? \"\"\n              : window.getComputedStyle(child).transition\n          );\n        }\n      );\n    }\n  }, [isMounted]);\n\n  const runScroll = () => {\n    const dx = internalState.current.scrollSpeedX * timing;\n    const dy = internalState.current.scrollSpeedY * timing;\n    const offsetX = ref.current.scrollLeft + dx;\n    const offsetY = ref.current.scrollTop + dy;\n\n    ref.current.scrollLeft = offsetX; // eslint-disable-line no-param-reassign\n    ref.current.scrollTop = offsetY; // eslint-disable-line no-param-reassign\n    internalState.current.lastScrollX = offsetX;\n    internalState.current.lastScrollY = offsetY;\n  };\n\n  const rubberBandCallback = (e: MouseEvent) => {\n    const dx = e.clientX - internalState.current.initialMouseX;\n    const dy = e.clientY - internalState.current.initialMouseY;\n\n    const { clientWidth, clientHeight } = ref.current;\n\n    let displacementX = 0;\n    let displacementY = 0;\n\n    if (isScrollableAlongX && isScrollableAlongY) {\n      displacementX =\n        0.3 *\n        clientWidth *\n        Math.sign(dx) *\n        Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth);\n      displacementY =\n        0.3 *\n        clientHeight *\n        Math.sign(dy) *\n        Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight);\n    } else if (isScrollableAlongX) {\n      displacementX =\n        0.3 *\n        clientWidth *\n        Math.sign(dx) *\n        Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth);\n    } else if (isScrollableAlongY) {\n      displacementY =\n        0.3 *\n        clientHeight *\n        Math.sign(dy) *\n        Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight);\n    }\n\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement) => {\n        child.style.transform = `translate3d(${displacementX}px, ${displacementY}px, 0px)`; // eslint-disable-line no-param-reassign\n        child.style.transition = \"transform 0ms\"; // eslint-disable-line no-param-reassign\n      }\n    );\n  };\n\n  const recoverChildStyle = () => {\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement, i) => {\n        child.style.transform = transformStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n        child.style.transition = transitionStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n      }\n    );\n  };\n\n  let rubberBandAnimationTimer: NodeJS.Timeout;\n  let keepMovingX: NodeJS.Timer;\n  let keepMovingY: NodeJS.Timer;\n\n  const callbackMomentum = () => {\n    const minimumSpeedToTriggerMomentum = 0.05;\n\n    keepMovingX = setInterval(() => {\n      const lastScrollSpeedX = internalState.current.scrollSpeedX;\n      const newScrollSpeedX = lastScrollSpeedX * decayRate;\n      internalState.current.scrollSpeedX = newScrollSpeedX;\n\n      const isAtLeft = ref.current.scrollLeft <= 0;\n      const isAtRight = ref.current.scrollLeft >= maxHorizontalScroll;\n      const hasReachedHorizontalEdges = isAtLeft || isAtRight;\n\n      runScroll();\n\n      if (\n        Math.abs(newScrollSpeedX) < minimumSpeedToTriggerMomentum ||\n        internalState.current.isMouseDown ||\n        hasReachedHorizontalEdges\n      ) {\n        internalState.current.scrollSpeedX = 0;\n        clearInterval(keepMovingX);\n      }\n    }, timing);\n\n    keepMovingY = setInterval(() => {\n      const lastScrollSpeedY = internalState.current.scrollSpeedY;\n      const newScrollSpeedY = lastScrollSpeedY * decayRate;\n      internalState.current.scrollSpeedY = newScrollSpeedY;\n\n      const isAtTop = ref.current.scrollTop <= 0;\n      const isAtBottom = ref.current.scrollTop >= maxVerticalScroll;\n      const hasReachedVerticalEdges = isAtTop || isAtBottom;\n\n      runScroll();\n\n      if (\n        Math.abs(newScrollSpeedY) < minimumSpeedToTriggerMomentum ||\n        internalState.current.isMouseDown ||\n        hasReachedVerticalEdges\n      ) {\n        internalState.current.scrollSpeedY = 0;\n        clearInterval(keepMovingY);\n      }\n    }, timing);\n\n    internalState.current.isDraggingX = false;\n    internalState.current.isDraggingY = false;\n\n    if (applyRubberBandEffect) {\n      const transitionDurationInMilliseconds = 250;\n\n      (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n        (child: HTMLElement) => {\n          child.style.transform = `translate3d(0px, 0px, 0px)`; // eslint-disable-line no-param-reassign\n          child.style.transition = `transform ${transitionDurationInMilliseconds}ms`; // eslint-disable-line no-param-reassign\n        }\n      );\n\n      rubberBandAnimationTimer = setTimeout(\n        recoverChildStyle,\n        transitionDurationInMilliseconds\n      );\n    }\n  };\n\n  const preventClick = (e: Event) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    // e.stopPropagation();\n  };\n\n  const getIsMousePressActive = (buttonsCode: number) => {\n    return (\n      (activeMouseButton === \"Left\" && buttonsCode === 1) ||\n      (activeMouseButton === \"Middle\" && buttonsCode === 4) ||\n      (activeMouseButton === \"Right\" && buttonsCode === 2)\n    );\n  };\n\n  const onMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    const isMouseActive = getIsMousePressActive(e.buttons);\n    if (!isMouseActive) {\n      return;\n    }\n\n    internalState.current.isMouseDown = true;\n    internalState.current.lastMouseX = e.clientX;\n    internalState.current.lastMouseY = e.clientY;\n    internalState.current.initialMouseX = e.clientX;\n    internalState.current.initialMouseY = e.clientY;\n  };\n\n  const onMouseUp = (e: MouseEvent) => {\n    const isDragging =\n      internalState.current.isDraggingX || internalState.current.isDraggingY;\n\n    const dx = internalState.current.initialMouseX - e.clientX;\n    const dy = internalState.current.initialMouseY - e.clientY;\n\n    const isMotionIntentional =\n      Math.abs(dx) > safeDisplacement || Math.abs(dy) > safeDisplacement;\n\n    const isDraggingConfirmed = isDragging && isMotionIntentional;\n\n    if (isDraggingConfirmed) {\n      ref.current.childNodes.forEach((child) => {\n        child.addEventListener(\"click\", preventClick);\n      });\n    } else {\n      ref.current.childNodes.forEach((child) => {\n        child.removeEventListener(\"click\", preventClick);\n      });\n    }\n\n    internalState.current.isMouseDown = false;\n    internalState.current.lastMouseX = 0;\n    internalState.current.lastMouseY = 0;\n\n    ref.current.style.cursor = cursorStyleOfWrapperElement; // eslint-disable-line no-param-reassign\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement, i) => {\n        child.style.cursor = cursorStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n      }\n    );\n\n    if (isDraggingConfirmed) {\n      callbackMomentum();\n    }\n  };\n\n  const onMouseMove = (e: MouseEvent) => {\n    if (!internalState.current.isMouseDown) {\n      return;\n    }\n\n    e.preventDefault();\n\n    const dx = internalState.current.lastMouseX - e.clientX;\n    internalState.current.lastMouseX = e.clientX;\n\n    internalState.current.scrollSpeedX = dx / timing;\n    internalState.current.isDraggingX = true;\n\n    const dy = internalState.current.lastMouseY - e.clientY;\n    internalState.current.lastMouseY = e.clientY;\n\n    internalState.current.scrollSpeedY = dy / timing;\n    internalState.current.isDraggingY = true;\n\n    ref.current.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement) => {\n        child.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n      }\n    );\n\n    const isAtLeft = ref.current.scrollLeft <= 0 && isScrollableAlongX;\n    const isAtRight =\n      ref.current.scrollLeft >= maxHorizontalScroll && isScrollableAlongX;\n    const isAtTop = ref.current.scrollTop <= 0 && isScrollableAlongY;\n    const isAtBottom =\n      ref.current.scrollTop >= maxVerticalScroll && isScrollableAlongY;\n    const isAtAnEdge = isAtLeft || isAtRight || isAtTop || isAtBottom;\n\n    if (isAtAnEdge && applyRubberBandEffect) {\n      rubberBandCallback(e);\n    }\n\n    runScroll();\n  };\n\n  const handleResize = () => {\n    maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth;\n    maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight;\n  };\n\n  useEffect(() => {\n    if (isMounted) {\n      window.addEventListener(\"mouseup\", onMouseUp);\n      window.addEventListener(\"mousemove\", onMouseMove);\n      window.addEventListener(\"resize\", handleResize);\n    }\n    return () => {\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"resize\", handleResize);\n\n      clearInterval(keepMovingX);\n      clearInterval(keepMovingY);\n      clearTimeout(rubberBandAnimationTimer);\n    };\n  }, [isMounted]);\n\n  return {\n    events: {\n      onMouseDown,\n    },\n  };\n}\n","import { Avatar } from 'components/common/avatar/Avatar'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { font } from 'styles/Font'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Dialog = styled(NavLink)`\r\n    position: relative;\r\n    display: flex;\r\n    height: 60%;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    flex-direction: column;\r\n    aspect-ratio: 1 / 1;\r\n    padding: min(15px, 2vw);\r\n    &.active {\r\n        outline: 1px solid ${theme.color.background.primary};\r\n        background-color: ${theme.color.background.primary};\r\n        border-radius: 10px;\r\n    }\r\n    &:hover {\r\n        outline: 1px solid ${theme.color.background.primary};\r\n        background-color: ${theme.color.background.primary};\r\n        border-radius: 10px;\r\n    }\r\n    ${font({ weight: 400, Fmin: 10, Fmax: 14 })}\r\n    word-break: break-all;\r\n`\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    overflow-x: auto;\r\n    min-height: 100%;\r\n    width: 100%;\r\n`\r\nconst Photo = styled(Avatar)`\r\n    width: 70%;\r\n`\r\nconst Name = styled.span`\r\n    color: ${theme.color.text.primary_dark}\r\n`\r\n\r\nexport const S = {\r\n    Dialog,\r\n    Wrapper,\r\n    Photo,\r\n    Name\r\n}","import { DialogResponse } from 'api/dialogsAPI'\r\nimport { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport { memo, useEffect, useRef } from 'react'\r\nimport { useDraggable } from 'react-use-draggable-scroll'\r\nimport { S } from './DialogsBlock_Styles'\r\nimport { Patch } from 'components/app/Router/routeNames'\r\n\r\ntype Props = {\r\n    className?:string\r\n    dialogs: DialogResponse[]\r\n}\r\n\r\nexport const DialogsBlock: React.FC<Props> = memo(({ dialogs }) => {\r\n    const scrollIntoViewRef = useRef<null | HTMLAnchorElement>(null)\r\n    const draggRef = useRef<HTMLDivElement>() as React.MutableRefObject<HTMLInputElement>\r\n    const { events } = useDraggable(draggRef, { isMounted: true })\r\n\r\n    useEffect(() => {\r\n        scrollIntoViewRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }, [dialogs])\r\n\r\n    return <BlockSection id=\"dialogs-block\">\r\n        <BlockHeader>Dialogs: {dialogs.length}</BlockHeader>\r\n        <S.Wrapper ref={draggRef} {...events}>\r\n            {dialogs.map((dialog, index) =>\r\n                <S.Dialog\r\n                    key={dialog.id}\r\n                    ref={index === 0 ? scrollIntoViewRef : null}\r\n                    to={Patch.Messages + dialog.id}\r\n                >\r\n                    <S.Photo\r\n                        avatarURL={dialog.photos.small}\r\n                        lastUserActivityDate={dialog.lastUserActivityDate}\r\n                    />\r\n                    <S.Name>{dialog.userName}</S.Name>\r\n                </S.Dialog>\r\n            )}\r\n        </S.Wrapper>\r\n    </BlockSection>\r\n})\r\n\r\n","import styled from 'styled-components'\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-self: end;\r\n    gap: 10px;\r\n    textarea {\r\n        min-height: 70px;\r\n    }\r\n`\r\n\r\nexport const S = {\r\n    Form\r\n}","import { Button } from 'components/common/button/Button'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Input } from 'components/common/input/Input.styled'\r\nimport { KeyboardEvent } from 'react'\r\nimport { useFormik } from 'formik'\r\nimport { S } from './MessagesForm_Styles'\r\nimport { AlertType } from 'store/app/appReducer'\r\n\r\ntype Props = {\r\n    addMessage: (message: string) => void\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n}\r\ntype FormikError = {\r\n    message?: string\r\n}\r\nexport const MessagesForm: React.FC<Props> = ({ addMessage, addAppAlert }) => {\r\n    const addMessageKeyboardHandler = (e: KeyboardEvent<HTMLFormElement>) => {\r\n        if (e.key === 'Enter' && e.ctrlKey) {\r\n            formik.handleSubmit(e)\r\n        }\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            addMessage(values.message)\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikError = {}\r\n            if (!values.message) {\r\n                errors.message = 'Message is emtyt!'\r\n            } else if (values.message.length > 300) {\r\n                errors.message = 'Message must be less than 300 symbols!'\r\n                addAppAlert('failed', errors.message)\r\n            }\r\n            return errors\r\n        },\r\n    })\r\n    return <S.Form onSubmit={formik.handleSubmit}\r\n        onKeyDown={addMessageKeyboardHandler}\r\n    >\r\n        <Input\r\n            as={\"textarea\"}\r\n            aria-label=\"enter your message\"\r\n            placeholder=\"Enter your message\"\r\n            bordered={'true'}\r\n            id={'message'}\r\n            error={!!formik.errors.message ? 'true' : 'false'}\r\n            {...formik.getFieldProps('message')}\r\n            autoFocus\r\n        />\r\n        <FlexWrapper>\r\n            <Button\r\n                type={'submit'}\r\n                variant={'primary'}\r\n                disabled={!!formik.errors.message}\r\n                ariaLabel={'Submit button'}\r\n            >{'Send'}</Button>\r\n        </FlexWrapper>\r\n    </S.Form>\r\n}","import { Avatar } from 'components/common/avatar/Avatar'\r\nimport { font } from './../../../../styles/Font'\r\nimport styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\n\r\nconst Message = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: min(15px, 1vw);\r\n    ${font({ weight: 300, Fmin: 10, Fmax: 16 })}\r\n    border-bottom: 1px solid;\r\n    border-color: ${theme.color.background.primary};\r\n`\r\nconst Text = styled(FlexWrapper)`\r\n    display: flex;\r\n    align-self: center;\r\n    text-align: justify;\r\n    word-wrap: break-word;\r\n    width: 100%;\r\n    height: 100%;\r\n    color: ${theme.color.text.primary_dark};\r\n`\r\nconst Date = styled.span`\r\n    align-self: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    color: ${theme.color.text.primary};\r\n    width: 100%;\r\n`\r\nconst Name = styled.span`\r\n    text-align: center;\r\n    ${font({ weight: 400, Fmin: 10, Fmax: 14 })}\r\n    color: ${theme.color.text.primary_dark};\r\n`\r\nconst Photo = styled(Avatar)`\r\n    min-width: 40px;\r\n    max-width: 60px;\r\n`\r\nconst Time = styled.span`\r\n    ${font({ weight: 300, Fmin: 8, Fmax: 10 })}\r\n    align-self: center;\r\n    text-align: center;\r\n`\r\n\r\nexport const S = {\r\n    Message,\r\n    Date,\r\n    Avatar,\r\n    Name,\r\n    Photo,\r\n    Text,\r\n    Time\r\n}","\r\nimport { MessageResponse } from 'api/dialogsAPI'\r\nimport { FlexWrapper } from 'components/common/FlexWrapper.styled'\r\nimport { Icon } from 'components/common/icon/Icon'\r\nimport { memo, useEffect, useRef } from 'react'\r\nimport { theme } from 'styles/Theme.styled'\r\nimport { S } from './Message_Styles'\r\n\r\ntype Props = {\r\n    messageData: MessageResponse\r\n    opponentPhoto?: string\r\n    authPhoto: string\r\n    authId: number\r\n}\r\n\r\nexport const Message: React.FC<Props> = memo((props) => {\r\n    const { messageData, authId, authPhoto, opponentPhoto } = props\r\n    const bottomRef = useRef<null | HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        bottomRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }, [messageData])\r\n\r\n    const time = (date: string) => `${new Date(date).getHours()}:${new Date(date).getMinutes()}`\r\n    const date = (date: string) => new Date(date).toLocaleDateString()\r\n\r\n    return <S.Message>\r\n        <S.Date>{date(messageData.addedAt)}</S.Date>\r\n        <FlexWrapper\r\n            style={{\r\n                backgroundColor: messageData.viewed ? 'none' : theme.color.background.primary,\r\n                borderRadius: '10px',\r\n                padding: 'min(15px, 1vw)'\r\n            }}\r\n            direction={messageData.senderId === authId ? 'row' : 'row-reverse'}\r\n            gap='min(15px, 1vw)'>\r\n            <S.Time>{time(messageData.addedAt)}</S.Time>\r\n            {messageData.senderId === authId ?\r\n                <FlexWrapper direction=\"column\" align=\"center\" justify='center'>\r\n                    <S.Photo avatarURL={authPhoto} />\r\n                    <S.Name>{messageData.senderName}&nbsp;</S.Name>\r\n                </FlexWrapper> :\r\n                <FlexWrapper direction=\"column\" align=\"center\" justify='center'>\r\n                    <S.Photo avatarURL={opponentPhoto} />\r\n                    <S.Name>{messageData.senderName}&nbsp;</S.Name>\r\n                </FlexWrapper>\r\n            }\r\n            <S.Text\r\n                justify={messageData.senderId === authId ? 'start' : 'end'}\r\n                align={'center'}\r\n            >{messageData.body}\r\n            </S.Text>\r\n            <FlexWrapper\r\n                style={messageData.viewed ? { opacity: 1 } : { opacity: .3 }}\r\n                align={'center'}\r\n                justify={'center'}\r\n            ><Icon width='80%' iconId='readed' />\r\n            </FlexWrapper>\r\n        </FlexWrapper>\r\n        <div style={{ padding: 0, margin: 0 }} ref={bottomRef} />\r\n    </S.Message>\r\n})\r\n\r\n","import { Button } from 'components/common/button/Button'\r\nimport styled from 'styled-components'\r\n\r\nconst MessagesList = styled.div`\r\n    display: flex;\r\n    min-height: fit-content;\r\n    flex-direction: column;\r\n    gap: min(15px, 1vw);\r\n    overflow-y: auto;\r\n`\r\nconst EmptyMessages = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-self: center;\r\n    padding-bottom: min(15px, 1vw);\r\n    overflow-y: hidden;\r\n`\r\nconst LoadMessgesButton = styled(Button)`\r\n    display: flex;\r\n    min-width: 100%;\r\n    justify-content: center;\r\n`\r\n\r\nexport const S = {\r\n    MessagesList,\r\n    EmptyMessages,\r\n    LoadMessgesButton\r\n}","import { Message } from 'components/blocks/messagesBlock/message/Message'\r\nimport { AuthState } from 'store/auth/authReducer'\r\nimport { MessagesState } from 'store/messages/messagesReducer'\r\nimport { S } from './MessagesList_Styles'\r\n\r\ntype Props = {\r\n    messagesState: MessagesState\r\n    appIsLoading: boolean\r\n    authData: AuthState\r\n    pageChangeHandler: () => void\r\n}\r\n\r\nexport const MessagesList: React.FC<Props> = (props) => {\r\n    const { authData, appIsLoading, pageChangeHandler: usersOnPageChangeHandler } = props\r\n    const { messagesOnPage, totalMessagesCount, messages, dialogs } = props.messagesState\r\n    return <S.MessagesList>{messagesOnPage < totalMessagesCount &&\r\n        <S.LoadMessgesButton\r\n            variant={'outlined'}\r\n            ariaLabel={'Load more messages'}\r\n            disabled={appIsLoading}\r\n            onClick={usersOnPageChangeHandler}\r\n        >\r\n            load more messages...\r\n        </S.LoadMessgesButton>\r\n    }\r\n        {messages.length ?\r\n            messages.map(message =>\r\n                <Message\r\n                    key={message.id}\r\n                    authId={authData.id}\r\n                    messageData={message}\r\n                    authPhoto={authData.photoUrl}\r\n                    opponentPhoto={dialogs[0]?.photos.small}\r\n                />\r\n            ) : <S.EmptyMessages>No messages...</S.EmptyMessages>\r\n        }\r\n    </S.MessagesList>\r\n}","import { BlockHeader } from 'components/blocks/BlockHeader.styled'\r\nimport { BlockSection } from 'components/blocks/BlockSection.styled'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\nconst MessagesBlock = styled(BlockSection)`\r\n    min-height: fit-content;\r\n    max-height: 124.5vh;\r\n    justify-content: space-between;\r\n`\r\nconst Header = styled(BlockHeader)`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: start;\r\n`\r\nconst ProfileLink = styled(NavLink)`\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n    width: min(40px, 8vw);\r\n`\r\nconst ListWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n`\r\n\r\nexport const S = {\r\n    MessagesBlock,\r\n    Header,\r\n    ProfileLink,\r\n    ListWrapper,\r\n}","import { Patch } from 'components/app/Router/routeNames'\r\nimport { MessagesForm } from 'components/blocks/messagesBlock/messagesForm/MessagesForm'\r\nimport { MessagesList } from 'components/blocks/messagesBlock/messagesList/MessagesList'\r\nimport { Avatar } from 'components/common/avatar/Avatar'\r\nimport { memo } from 'react'\r\nimport { AuthState } from 'store/auth/authReducer'\r\nimport { MessagesState } from 'store/messages/messagesReducer'\r\nimport { S } from './MessagesBlock_Styles'\r\nimport { AlertType } from 'store/app/appReducer'\r\n\r\ntype Props = {\r\n    className?: string\r\n    messagesState: MessagesState\r\n    appIsLoading: boolean\r\n    authData: AuthState\r\n    addMessage: (message: string) => void\r\n    pageChangeHandler: () => void\r\n    addAppAlert: (type: AlertType, message: string) => void\r\n}\r\n\r\nexport const MessagesBlock: React.FC<Props> = memo((props) => {\r\n    const { addMessage, addAppAlert, pageChangeHandler,\r\n        authData, appIsLoading, messagesState } = props\r\n\r\n    return <S.MessagesBlock id=\"messages-block\">\r\n        <S.Header >\r\n            <S.ProfileLink to={Patch.Profile + messagesState.dialogs[0]?.id}>\r\n                <Avatar avatarURL={messagesState.dialogs[0]?.photos.small} />\r\n                {messagesState.dialogs[0]?.userName}:\r\n            </S.ProfileLink>\r\n        </S.Header>\r\n        <S.ListWrapper>\r\n            <MessagesList\r\n                authData={authData}\r\n                appIsLoading={appIsLoading}\r\n                messagesState={messagesState}\r\n                pageChangeHandler={pageChangeHandler}\r\n            />\r\n            <MessagesForm\r\n                addAppAlert={addAppAlert}\r\n                addMessage={addMessage}\r\n            />\r\n        </S.ListWrapper>\r\n    </S.MessagesBlock >\r\n})\r\n\r\n\r\n\r\n\r\n","import { DialogResponse, MessageResponse } from 'api/dialogsAPI'\r\nimport { MessagesState } from 'store/messages/messagesReducer'\r\nimport { AppRootState } from 'store/redux-store'\r\n\r\nexport const selectMessagesState = (state: AppRootState): MessagesState => state.messages\r\nexport const selectMessages = (state: AppRootState): MessageResponse[] => state.messages.messages\r\nexport const selectDialogs = (state: AppRootState): DialogResponse[] => state.messages.dialogs\r\nexport const selectMessagesCurrentPage = (state: AppRootState): number => state.messages.currentPage\r\nexport const selectMessagesOnPage = (state: AppRootState): number => state.messages.messagesOnPage\r\nexport const selectTotalMessagesCount = (state: AppRootState): number => state.messages.totalMessagesCount","import styled from 'styled-components'\r\nimport { theme } from 'styles/Theme.styled'\r\n\r\nconst Messages = styled.main`\r\n    height: 100%;\r\n    gap: min(30px, 2vw);\r\n    display: flex;\r\n    overflow-x: hidden;\r\n    @media ${theme.media.mobile} {\r\n        flex-direction: column;\r\n    }\r\n    `\r\nconst FriendsWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: min(30px, 2vw);\r\n    min-width: 170px;\r\n    max-width: 20%;\r\n    @media ${theme.media.mobile} {\r\n        display: none;\r\n    }\r\n    `\r\nconst MessagesWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 80%;\r\n    gap: min(30px, 2vw);\r\n    @media ${theme.media.mobile} {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nexport const S = {\r\nMessages,\r\nMessagesWrapper,\r\nFriendsWrapper\r\n}","import { Patch } from 'components/app/Router/routeNames'\r\nimport { DialogsBlock } from 'components/blocks/dialogsBlock/DialogsBlock'\r\nimport { FriendsBlock } from 'components/blocks/friendsBlock/FriendsBlock'\r\nimport { MessagesBlock } from 'components/blocks/messagesBlock/MessagesBlock'\r\nimport { ToTop } from 'components/common/toTop/ToTop'\r\nimport React, { memo, useEffect } from \"react\"\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { selectAppIsLoading } from 'store/app/appSelectors'\r\nimport { selectAuthData } from 'store/auth/authSelectors'\r\nimport { selectMessagesState } from 'store/messages/messagesSelectors'\r\nimport { useActions } from 'utils/customHooks/useActions'\r\nimport { S } from './Messages_Styles'\r\ntype Props = { className?: string }\r\n\r\nconst Messages: React.FC<Props> = memo(({ className }) => {\r\n    const messagesState = useSelector(selectMessagesState)\r\n    const appIsLoading = useSelector(selectAppIsLoading)\r\n    const authData = useSelector(selectAuthData)\r\n    const { addAppAlert, startDialog, getDialogs, sendMessage, getMessages } = useActions()\r\n    const params = useParams<{ userId: string }>()\r\n    const history = useHistory()\r\n    const { currentPage, messagesOnPage, totalMessagesCount } = messagesState\r\n    const DOWNLOAD_MESSAGES_PORTION = 3\r\n\r\n    useEffect(() => {\r\n        if (!params.userId) {\r\n            getDialogs()\r\n                .then(res => {\r\n                    if (res.payload?.dialogs[0]) {\r\n                        history.push(Patch.Messages + res.payload.dialogs[0].id)\r\n                    } else addAppAlert('info', 'Dialogs is emty... Start chatting with someone.')\r\n                }).catch(err => {\r\n                    addAppAlert('failed', err)\r\n                })\r\n        }\r\n        else {\r\n            startDialog(+params.userId)\r\n            getMessages({ userId: +params.userId, currentPage, messagesOnPage })\r\n        }\r\n    }, [params.userId, currentPage, messagesOnPage])\r\n\r\n    const pageChangeHandler = () => {\r\n        let newMessagesNumber = messagesOnPage\r\n        if (messagesOnPage < totalMessagesCount) {\r\n            newMessagesNumber += DOWNLOAD_MESSAGES_PORTION\r\n            getMessages({ userId: +params.userId, currentPage: 1, messagesOnPage: newMessagesNumber })\r\n        }\r\n    }\r\n\r\n    const addMessage = (message: string) => {\r\n        params.userId && sendMessage({ userId: +params.userId, message })\r\n    }\r\n\r\n    return <S.Messages id=\"messages\">\r\n        <ToTop anchor_id='dialogs-block' />\r\n        <S.FriendsWrapper>\r\n            <FriendsBlock className={className} headerName='Friens' />\r\n            <FriendsBlock className={className} headerName='Might know' isFriends={false} />\r\n        </S.FriendsWrapper>\r\n        <S.MessagesWrapper>\r\n            <DialogsBlock dialogs={messagesState.dialogs} />\r\n            <MessagesBlock\r\n                authData={authData}\r\n                appIsLoading={appIsLoading}\r\n                messagesState={messagesState}\r\n                addMessage={addMessage}\r\n                addAppAlert={addAppAlert}\r\n                pageChangeHandler={pageChangeHandler}\r\n            />\r\n        </S.MessagesWrapper>\r\n    </S.Messages>\r\n})\r\n\r\nexport default Messages\r\n\r\n"],"names":["BlockHeader","styled","_templateObject","_taggedTemplateLiteral","theme","font","weight","Fmin","Fmax","BlockSection","S","Friend","NavLink","Photo","Avatar","_templateObject2","Name","_templateObject3","memo","props","_jsxs","to","Patch","friendData","id","children","_jsx","avatarURL","photos","small","name","FriendsBlock","FriendsList","FriendsPagination","Pagination","selectPossibleFriendsData","state","friends","possibleFriends","selectFriendsData","_ref","headerName","blockHeaderName","className","isFriends","getFriends","useActions","totalUsersCount","currentPage","usersOnPage","users","useSelector","isLoading","selectAppIsLoading","randomPage","min","max","minCeiled","Math","ceil","maxFloored","floor","random","getRandomPage","useEffect","toLowerCase","replaceAll","FlexWrapper","justify","Button","onClick","randomizeFriends","variant","ariaLabel","map","friend","direction","appIsLoading","pagesPortion","pageChangeHandler","pageNumber","PaginationInput","Input","rangesCount","rangesArray","Array","from","length","_","i","pagesRange","currentRange","setCurrentRange","useState","showInput","setShowInput","minPageIndex","maxPageIndex","formik","useFormik","initialValues","page","enableReinitialize","onSubmit","values","validate","errors","align","disabled","pagesRangeDec","prev","Icon","iconId","viewBox","height","width","filter","el","index","arr","isActive","toString","handleSubmit","type","placeholder","concat","error","touched","value","onChange","e","handleChange","onBlur","handleBlur","autoFocus","_Fragment","showInputHandler","pagesRangeInc","ToTop","Link","anchor_id","scrolled","setScrolled","location","useLocation","lastHash","useRef","main","document","querySelector","onScroll","scrollTop","addEventListener","removeEventListener","hash","current","slice","getElementById","setTimeout","_document$getElementB","scrollIntoView","behavior","block","onClickHandler","useIsomorphicLayoutEffect","window","useLayoutEffect","useDraggable","ref","_temp","cursorStyleOfWrapperElement","cursorStyleOfChildElements","transformStyleOfChildElements","transitionStyleOfChildElements","decayRate","_ref$decayRate","safeDisplacement","_ref$safeDisplacement","applyRubberBandEffect","_ref$applyRubberBandE","activeMouseButton","_ref$activeMouseButto","isMounted","_ref$isMounted","internalState","isMouseDown","isDraggingX","isDraggingY","initialMouseX","initialMouseY","lastMouseX","lastMouseY","scrollSpeedX","scrollSpeedY","lastScrollX","lastScrollY","isScrollableAlongX","isScrollableAlongY","maxHorizontalScroll","maxVerticalScroll","timing","getComputedStyle","overflowX","overflowY","scrollWidth","clientWidth","scrollHeight","clientHeight","cursor","childNodes","forEach","child","push","transform","transition","rubberBandAnimationTimer","keepMovingX","keepMovingY","runScroll","dx","dy","offsetX","scrollLeft","offsetY","recoverChildStyle","style","preventClick","preventDefault","stopImmediatePropagation","onMouseUp","isDragging","clientX","clientY","isMotionIntentional","abs","isDraggingConfirmed","setInterval","newScrollSpeedX","isAtLeft","isAtRight","hasReachedHorizontalEdges","clearInterval","newScrollSpeedY","isAtTop","isAtBottom","hasReachedVerticalEdges","onMouseMove","_ref$current","displacementX","displacementY","sign","log10","rubberBandCallback","handleResize","clearTimeout","events","onMouseDown","buttonsCode","buttons","Dialog","Wrapper","_templateObject4","DialogsBlock","dialogs","scrollIntoViewRef","draggRef","_scrollIntoViewRef$cu","dialog","lastUserActivityDate","userName","Form","MessagesForm","addMessage","addAppAlert","message","resetForm","onKeyDown","key","ctrlKey","as","bordered","getFieldProps","Message","Text","Date","_templateObject5","Time","_templateObject6","messageData","authId","authPhoto","opponentPhoto","bottomRef","_bottomRef$current","date","toLocaleDateString","addedAt","backgroundColor","viewed","borderRadius","padding","senderId","gap","getHours","getMinutes","time","senderName","body","opacity","margin","MessagesList","EmptyMessages","LoadMessgesButton","authData","usersOnPageChangeHandler","messagesOnPage","totalMessagesCount","messages","messagesState","_dialogs$","photoUrl","MessagesBlock","Header","ProfileLink","ListWrapper","_messagesState$dialog","_messagesState$dialog2","_messagesState$dialog3","selectMessagesState","Messages","FriendsWrapper","MessagesWrapper","selectAuthData","startDialog","getDialogs","sendMessage","getMessages","params","useParams","history","useHistory","userId","then","res","_res$payload","payload","catch","err","newMessagesNumber"],"sourceRoot":""}